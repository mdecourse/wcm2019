<h1>Introduction</h1>
<p>機械設計工程系暨精密機械工程科 2019 Spring 網際內容管理課程 (Introduction to Web Content Management Systems Site Development)</p>
<p>倉儲: <a href="https://github.com/mdecourse/wcm2019">https://github.com/mdecourse/wcm2019</a></p>
<p>靜態網頁: <a href="https://mde.tw/wcm2019">https://mde.tw/wcm2019</a> </p>
<p>動態網頁: <a href="https://wcm2019.herokuapp.com">https://wcm2019.herokuapp.com</a> </p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h4>107學年教育目標:</h4>
<p>本課程延續五專部計算機概論與四技部計算機程式之教學內容, 探討網際內容管理系統 - <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a>  之使用及後續應用.</p>
<h4>107-2學期教育目標:</h4>
<p>從 Intel-based 電腦硬體的組裝、安裝操作系統、配置網路連線到設定 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> , 引導學員學習如何運用電腦與網路系統, 自行架構符合機械協同設計流程使用之網際內容管理伺服系統.</p>
<h4>達成學期教育目標之評量方式與標準:</h4>
<p>評分比例:</p>
<p style="padding-left: 30px;">學員出席 (20%)</p>
<p style="padding-left: 30px;">電腦組裝與操作系統安裝 (10%)</p>
<p style="padding-left: 30px;">網路連線配置與設定  (10%)</p>
<p style="padding-left: 30px;">Github 倉儲與 CMSimfly 配置 (30%)</p>
<p style="padding-left: 30px;">CMSimfly 操作 (20%)</p>
<p style="padding-left: 30px;">CMSimfly 開發 (10%)</p>
<p>評分方式:</p>
<p style="padding-left: 30px;">WCM 每週自評與互評表單: <a href="https://goo.gl/forms/gExeWw3JIrenXi453">https://goo.gl/forms/gExeWw3JIrenXi453</a> (只接受 gm.nfu.edu.tw 使用者)</p>
<p style="padding-left: 30px;">學員自我評量<span> (30%)</span></p>
<p style="padding-left: 30px;">分組自我評量 (30%)</p>
<p style="padding-left: 30px;">倉儲歷程查驗 (40%)</p>
<p>教學方式:</p>
<p style="padding-left: 30px;">課堂講授</p>
<p style="padding-left: 30px;">操作錄影</p>
<p style="padding-left: 30px;">學員實習</p>
<p style="padding-left: 30px;">分組報告</p><h2>P-Tech</h2>
<h4>Pathways in Technology Early College High school (技術導向早期學院高中)</h4>
<p>從 <a href="http://www.ptech.org/about/history/">http://www.ptech.org/about/history/</a> 可以看出, 促成此一以技術教育為導向的早期學院高中, 共有兩項主因.</p>
<ol>
<li>職場需要高中以上學歷的技術人員</li>
<li>在美國上大學的費用極高, 每年花費從  12320 - 48510 美元 (每年花費約台幣 37 萬至 150 萬)</li>
</ol>
<p><img alt="" height="362" src="/images/us_college_tuition_18-19.png" width="800"/>(來源:<a href="https://trends.collegeboard.org/college-pricing/figures-tables/average-published-undergraduate-charges-sector-2018-19">https://trends.collegeboard.org/college-pricing/figures-tables/average-published-undergraduate-charges-sector-2018-19</a>)</p>
<p>因此, IBM 才與紐約地區的公立高中合作, 從 Grade 9 (國中三年級) 到 Grade 14 (大學二年級), 安排由高中、大學與企業等三方提供師資, 規劃六年課程, 縮減原先高中的課程, 允許學生到鄰近科技大學選修特定課程, 且在最後大學兩年免學費外, 還安排至企業實習,  畢業後取得高中學歷與副學士學位, 可優先進入合作企業的公司工作.</p>
<h4>P-Tech 學程 Q&amp;A</h4>
<p><a href="https://www.ptechnyc.org/domain/31">https://www.ptechnyc.org/domain/31</a> </p>
<h4>其他相關資料</h4>
<p><a href="/downloads/五專優先免試入學辦理現況與建議.pdf">五專優先免試入學辦理現況與建議.pdf</a></p>
<p><a href="/downloads/五專恢復招生弊多於利－以機械科系為例.pdf">五專恢復招生弊多於利－以機械科系為例.pdf</a></p>
<p></p><h2>C-K and future job</h2>
<h4>Concept-Knowledge Design Theory (概念-知識設計理論)</h4>
<p>C-K theory: <a href="/downloads/The C-K theory_ a model for creativity - Paris Innovation Review.pdf">1</a>, <a href="/downloads/C-K theory_modelling creative thinking and its impact on research.pdf">2</a>, <a href="/downloads/The Engineering Design CK Theory_Contributions and Limits.pdf">3</a>, <a href="/downloads/C-K Theory in Practice_ Lessons from Industrial Applications.pdf">4</a></p>
<hr/>
<h4>2018 未來工作發展趨勢報告</h4>
<p><a href="/downloads/future-of-jobs-2018-world-economic-forum.pdf">future-of-jobs-2018-world-economic-forum.pdf</a></p>
<h4>2022 年之前, 企業預計納用技術比例列表</h4>
<p><img alt="" height="404" src="/images/adopted_technologies_by_2022.png" width="800"/></p>
<h4>各企業穩定, 新增與多餘工作角色列表</h4>
<p><img alt="" height="586" src="/images/stable_new_and_redundant_roles_by_2022.png" width="800"/></p>
<p>Drivers of change (變革的驅動力): Four specific technological advances—ubiquitous high-speed mobile internet (無所不在的高速移動互聯網); artificial intelligence (人工智慧); widespread adoption of big data analytics (廣泛採用大數據分析); and cloud technology (雲端技術)—are set to dominate the 2018–2022 period as drivers positively affecting business growth. They are flanked by a range of socio-economic trends driving business opportunities in tandem with the spread of new technologies, such as national economic growth trajectories; expansion of education and the middle classes, in particular in developing economies; and the move towards a greener global economy through advances in new energy technologies .</p>
<p>Accelerated technology adoption (加速技術採用): By 2022, according to the stated investment intentions of companies surveyed for this report, 85% of respondents are likely or very likely to have expanded their adoption of user and entity big data analytics (大數據分析). Similarly, large proportions of companies are likely or very likely to have expanded their adoption of technologies such as the internet of things (物聯網) and app- and web-enabled markets (網際致動市場), and to make extensive use of cloud computing (雲端運算). Machine learning (機器學習) and augmented and virtual reality (擴增與虛擬實境) are poised to likewise receive considerable business investment.</p>
<p>Trends in robotization (機器人化趨勢): While estimated use cases for humanoid robots (人形機器人) appear to remain somewhat more limited over the 2018–2022 period under consideration in this report, collectively, a broader range of recent robotics technologies at or near commercialization—including stationary robots (固定式機器人), non-humanoid land robots (非人形陸地機器人) and fully automated aerial drones (全自動空中無人機), in addition to machine learning algorithms (機器學習演算法) and artificial intelligence (人工智能)—are attracting significant business interest in adoption.<br/>Robot adoption rates diverge significantly across sectors, with 37% to 23% of companies planning this investment, depending on industry. Companies across all sectors are most likely to adopt the use of stationary robots, in contrast to humanoid, aerial or underwater<br/>robots, however leaders in the Oil &amp; Gas industry report the same level of demand for stationary and aerial and underwater robots, while employers in the Financial Services industry are most likely to signal the planned adoption of humanoid robots in the period up to 2022.</p>
<p>Changing (不斷變化中的) geography of production, distribution and value chains: By 2022, 59% of employers surveyed for this report expect that they will have significantly modified how they produce and distribute by changing the composition of their value chain and nearly half expect to have modified their geographical base of operations. When determining job location decisions, companies overwhelmingly prioritize the availability of skilled local (在地) talent as their foremost consideration, with 74% of respondents providing this factor as their key consideration. In contrast, 64% of companies cite labour costs (人力成本) as their main concern. A range of additional relevant factors—such as the flexibility of local labour laws, industry agglomeration effects (產業群聚效應) or proximity of raw materials (原料接近程度)—were considered of lower importance.</p>
<p>Changing employment types (不斷變化的就業型態): Nearly 50% of companies expect that automation (自動化) will lead to some reduction in their full-time workforce by 2022, based on the job profiles of their employee base today. However, 38% of businesses surveyed expect to extend their workforce to new productivity-enhancing roles, and more than a quarter expect automation to lead to the creation of new roles in their enterprise. In addition, businesses are set to expand their use of contractors (承包商) doing task-specialized work, with many respondents highlighting their intention to engage workers in a more flexible manner, utilizing remote staffing (遠端人員) beyond physical offices and decentralization of operations.</p>
<p>A new human-machine frontier (人機前緣) within existing tasks: Companies expect a significant shift on the frontier between humans and machines when it comes to existing work tasks between 2018 and 2022. In 2018, an average of 71% of total task hours across the 12 industries covered in the report are performed by humans, compared to 29% by machines. By 2022 this average is expected to have shifted to 58% task hours performed by humans and 42% by machines. In 2018, in terms of total working hours, no work task was yet estimated to be predominantly performed by a machine or an algorithm. By 2022, this picture is projected to have somewhat changed, with machines and algorithms (機器與演算法) on average increasing their contribution to specific tasks by 57%. For example, by 2022, 62% of organization’s information and data processing and information search and transmission tasks will be performed by machines compared to 46% today. Even those work tasks that have thus far remained overwhelmingly human—communicating and interacting (溝通與互動) (23%); coordinating (協調), developing (發展), managing and advising (管理與建議) (20%); as well as reasoning and decisionmaking (推理與決策) (18%)—will begin to be automated (30%, 29%, and 27% respectively). Relative to their starting point today, the expansion of machines’ share of work task performance is particularly marked in the reasoning and decision (推理與決策)-making, administering, and looking for and receiving job-related information tasks.</p>
<p>A net positive outlook for jobs (正面看就業前景): However this finding is tempered by optimistic estimates around emerging tasks and growing jobs which are expected to offset declining jobs. Across all industries, by 2022, growth in emerging professions is set to increase their share of employment from 16% to 27% (11% growth) of the total employee base of company respondents, whereas the employment share of declining roles is set to decrease from currently 31% to 21% (10% decline).</p>
<p>About half of today’s core jobs—making up the bulk of employment across industries—will remain stable in the period up to 2022. Within the set of companies surveyed, representing over 15 million workers in total, current estimates would suggest a decline of 0.98 million jobs and a gain of 1.74 million jobs.</p>
<p>Extrapolating these trends across those employed by large firms in the global (nonagricultural) workforce, we generate a range of estimates for job churn in the period up to 2022. One set of estimates indicates that 75 million jobs may be displaced by a shift in the division of labour between humans and machines, while 133 million new roles may emerge that are more adapted to the new division of labour between humans, machines and algorithms.</p>
<p>While these estimates and the assumptions behind them should be treated with caution, not least because they represent a subset of employment globally, they are useful in highlighting the types of adaptation strategies that must be put in place to facilitate the transition of the workforce to the new world of work. They represent two parallel and interconnected fronts of change in workforce transformations: 1) large-scale decline in some roles as tasks within these roles become automated or redundant, and 2) large-scale growth in new products and services—and associated new tasks and jobs— generated by the adoption of new technologies and other socio-economic developments such as the rise of middle classes in emerging economies and demographic shifts.</p>
<p>Emerging in-demand roles: Among the range of established roles that are set to experience increasing demand in the period up to 2022 are Data Analysts and Scientists (數據分析家與科學家), Software and Applications Developers (軟體與應用程式開發者), and Ecommerce and Social Media Specialists (電子商務與社會媒體專家), roles that are significantly based on and enhanced by the use of technology.</p>
<p>Also expected to grow are roles that leverage distinctively ‘human' skills, such as Customer Service Workers, Sales and Marketing Professionals, Training and Development, People and Culture, and Organizational Development Specialists as well as Innovation Managers. Moreover, our analysis finds extensive evidence of accelerating demand for a variety of wholly new specialist roles related to understanding and leveraging the latest emerging technologies: AI and Machine Learning Specialists (人工智能與機器學習專家), Big Data  (大數據) Specialists, Process Automation Experts (流程自動化專家), Information Security Analysts (資訊安全分析), User Experience (用戶體驗) and Human-Machine Interaction  (人機互動) Designers, Robotics (機器人) Engineers, and Blockchain (區塊鍊)Specialists.</p>
<p>Growing skills instability (成長能力不穩定): Given the wave of new technologies and trends disrupting business models and the changing division of labour between workers and machines transforming current job profiles, the vast majority of employers surveyed for this report expect that, by 2022, the skills required to perform most jobs will have shifted significantly. Global average skills stability—the proportion of core skills required to perform a job that will remain the same—is expected to be about 58%, meaning an average shift of 42% in required workforce skills over the 2018–2022 period.</p>
<p>A reskilling imperative (再訓練勢在必行): By 2022, no less than 54% of all employees will require significant re- and upskilling. Of these, about 35% are expected to require additional training of up to six months, 9% will require reskilling lasting six to 12 months, while 10% will require additional skills training of more than a year. Skills continuing to grow in prominence by 2022 include analytical thinking and innovation as well as active learning and learning strategies.</p>
<p>Sharply increasing importance of skills such as technology design and programming highlights the growing demand for various forms of technology competency identified by employers surveyed for this report. Proficiency in new technologies is only one part of the 2022 skills equation, however, as ‘human’ skills such as creativity, originality and initiative, critical thinking, persuasion and negotiation will likewise retain or increase their value, as will attention to detail, resilience, flexibility and complex problem-solving. Emotional intelligence, leadership and social influence as well as service orientation also see an outsized increase in demand relative to their current prominence.</p>
<p>Current strategies for addressing skills gaps (解決技術落差的現行策略): Companies highlight three future strategies to manage the skills gaps widened by the adoption of new technologies. They expect to hire wholly new permanent staff already possessing skills relevant to new technologies; seek to automate the work tasks concerned completely; and retrain existing employees.</p>
<p>The likelihood of hiring new permanent staff with relevant skills is nearly twice the likelihood of strategic redundancies of staff lagging behind in new skills adoption. However, nearly a quarter of companies are undecided or unlikely to pursue the retraining of existing employees, and two-thirds expect workers to adapt and pick up skills in the course of their changing jobs. Between one-half and two-thirds are likely to turn to external contractors, temporary staff and freelancers to address their skills gaps.</p>
<p>Insufficient reskilling and upskilling (缺乏重新與提升訓練): Employers indicate that they are set to prioritize and focus their re- and upskilling efforts on employees currently performing high-value roles as a way of strengthening their enterprise’s strategic capacity, with 54% and 53% of companies, respectively, stating they intend to target employees in key roles and in frontline roles which will be using relevant new technologies. In addition, 41% of employers are set to focus their reskilling provision on high-performing employees while a much smaller proportion of 33% stated that they would prioritize at-risk employees in roles expected to be most affected by technological disruption. In other words, those most in need of reskilling and upskilling are least likely to receive such training.</p>
<p>There are complex feedback loops between new technology, jobs and skills. New technologies can drive business growth, job creation and demand for specialist skills but they can also displace entire roles when certain tasks become obsolete or automated. Skills gaps—both among workers and among the leadership of organizations—can speed up the trends towards automation in some cases but can also pose barriers to the adoption of new technologies and therefore impede business growth.</p>
<p>The findings of this report suggest the need for a comprehensive ‘augmentation strategy’, an approach where businesses look to utilize the automation of some job tasks to complement and enhance their human workforces’ comparative strengths and ultimately to enable and empower employees to extend to their full potential. Rather than narrowly focusing on automation-based labour cost savings, an augmentation strategy takes into account the broader horizon of value-creating activities that can be accomplished by human workers, often in complement to technology, when they are freed of the need to perform routinized, repetitive tasks and better able to use their distinctively human talents.</p>
<p>However, to unlock this positive vision, workers will need to have the appropriate skills enabling them to thrive in the workplace of the future and the ability to continue to retrain throughout their lives. Crafting a sound in-company lifelong learning system, investing in human capital and collaborating with other stakeholders on workforce strategy should thus be key business imperatives, critical to companies’ medium to long-term growth, as well as an important contribution to society and social stability. A mindset of agile learning will also be needed on the part of workers as they shift from the routines and limits of today’s jobs to new, previously unimagined futures.</p>
<p>Finally, policy-makers, regulators and educators will need to play a fundamental role in helping those who are displaced repurpose their skills or retrain to acquire new skills and to invest heavily in the development of new agile learners in future workforces by tackling improvements to education and training systems, as well as updating labour policy to match the realities of the Fourth Industrial Revolution.</p>
<hr/><h2>計算機程式</h2>
<p><a href="http://solvespace.com">Solvespace</a> 以 C++ 編寫, 是一套 CAD單機程式套件.</p>
<p><a href="https://github.com/xibyte/jsketcher">Jsketcher</a> 以 Javascript 編寫, 是一套的網際前端 (Front-end) CAD 程式套件.</p>
<p><a href="https://github.com/Range-Software/range3">Range Software3</a> 以 C++ 編寫, 是一套 CAE 單機程式套件.</p>
<p>而根據<a href="https://www.quora.com/What-are-the-basic-components-of-a-CAD-system">這裡</a>的說明, 一個典型的電腦輔助機械設計套件包含:</p>
<p>The major components for a parametric system are:</p>
<p>Geometry kernel (幾何運算核心). This component actually performs operations on objects. Points, curves, surfaces, bodies, and other types of objects. Examples include: Parasolid, ACIS, Granite.</p>
<p>Constraint solver (約束求解器). This component manages and solves the various parameters, constraints, limits present in the mode. D-Cubed is an example of one of these.</p>
<p>Data schema (數據模式表示法). How are things represented? What goes into a CAD file? This component is all about how the model is represented, communicated, stored.</p>
<p>User Interface (使用者介面). Here, the user is give a way to create, and edit objects, entities, sketches, equations, constraints and more.</p>
<p>Tessellator (曲面細分處理器). This component prepares models for graphical representation. The model gets a second representation as triangles a GPU can use to make images of the model for the user.</p>
<p>Renderer (著色渲染器). Uses data from the tessellator. Will also build lots of stuff, like pick lists. This component manages the display and works closely with the user interface.</p>
<p>Programming API (程式延伸介面). Instead of a user doing the work, a program can.</p>
<p>Data Products (其他數據產品, 例如: 常用機械零組件). Many given pieces of information are often part of the CAD system. Materials, fasteners and more are supplied for the user to work with and often save time as they do not need to input these details.</p>
<p>Translators (零件格式轉檔器), filters. A component that can either take foreign CAD data and transform it into native, or native to foreign. Examples would be STEP, DXF, STL</p>
<p>There are many more components present in most CAD systems. These are major components necessary for a CAD system to be useful and productive.</p>
<p>上列描述的只是 MCAD (Mechanical Computer Aided Design) 套件的一小部分, 電腦輔助機械設計除了基本零組件的 2D/3D 外型繪製與組立外, 還有 2D/3D 機構的模擬分析與合成 (例如: <a href="https://www.artas.nl/en/">SAM</a> 與 <a href="https://github.com/KmolYuan/Pyslvs-UI">Pyslvs</a>), 還有進行強度分析的各種 CAE, 以及 CAM, 可見與機械設計相關的程式設計, 並沒有想像中單純, 而這些分析與模擬套件, 還未納入與控制系統設計相關的軟體.</p>
<p>因此, 想要單單以一門計算機程式, 來培養有能力開發電腦程式進行機械設計, 是遠遠不夠, 更別提在目前網路通訊及多核運算晶片的快速發展下, 電腦軟硬體的整合發展已經逐步將單機執行的軟體套件, 帶往能夠多人即時協同的網際程式環境, 此一發展更大大提高初學者的進入門檻.</p>
<h4>機械計算機程式設計</h4>
<p>從許多 CAD/E/M 都是利用 C++ 編寫的角度來看, 計算機程式教學從 C++ 入手似乎是個不錯的開始, 只是 C++ 程式需要編譯, 使用上較為繁瑣, 而且若從 Windows 10 的開發環境中學習 C++, 在不使用 Visual Studio 的前提下 (Why? tl;dr, 因為可以使用更簡便的 <a href="https://www.msys2.org/">MSYS2</a> 環境).</p>
<p>相對較好的建議是從 Python 及 Lua 入手,  使用 Python 結合 <a href="https://github.com/mottosso/Qt.py">https://github.com/mottosso/Qt.py</a> 網羅 Github 現有的許多 PyQt4, PyQt5 或 Pyside2 的程式, 用來建立單機介面, 然後在編寫機械相關運算核心程式庫的同時, 設法利用 <a href="https://cython.org/">cython</a>,  熟悉 Python 與 C/C++ 之間的關係, 當然最佳情況下, 可以快速以 Python 編寫 <a href="https://cython.org/">cython</a> 碼, 然後再設法編譯為 C/C++ 程式碼後編譯成動態程式庫, 由 GUI介面呼叫使用.</p>
<p>當然, 長遠來看 <a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16985/First-Look-Onshape-Enterprise.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16985/First-Look-Onshape-Enterprise.aspx</a>  勢必主宰全球機械協同設計流程, 只是經由各種老舊技術設計的產品及流程, 或許仍會永遠存在.  不同階段踏出社會的機械設計工程師們, 仍舊必須不斷面對挑戰, 然後做出決定: 到底是停在當下, 還是繼續跟著浪潮走.</p>
<p>停在當下, 可能面臨淘汰</p>
<p>而想跟著浪潮走, 茫茫大海, 哪裡才是方向?</p>
<p>從 <a href="https://en.wikipedia.org/wiki/SQLite">SQLite</a> 與 <a href="https://en.wikipedia.org/wiki/Fossil_(software)">Fossil SCM</a> 的開發歷程來看, 在計算機程式領域, 能夠給機械設計工程師最好的建議是:</p>
<h4>眼光要放遠, 但是要確定腳是踏在堅實的地上.</h4>
<h4>單機程式</h4>
<p style="padding-left: 30px;"><a href="https://build-system.fman.io/pyqt5-tutorial">https://build-system.fman.io/pyqt5-tutorial</a> </p>
<h4>網際程式</h4>
<p style="padding-left: 30px;"><a href="https://www.codefellows.org/courses/code-101/intro-to-software-development-and-careers-in-tech/">https://www.codefellows.org/courses/code-101/intro-to-software-development-and-careers-in-tech/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.codefellows.org/courses/code-201/foundations-of-software-development/">https://www.codefellows.org/courses/code-201/foundations-of-software-development/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.codefellows.org/courses/code-301/intermediate-software-development/">https://www.codefellows.org/courses/code-301/intermediate-software-development/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.codefellows.org/courses/code-401/advanced-software-development-in-python/">https://www.codefellows.org/courses/code-401/advanced-software-development-in-python/</a> </p>
<p style="padding-left: 30px;">Gear Sketch: <a href="http://mde.tw/2017springcd/GearSketch/index.html">http://mde.tw/2017springcd/GearSketch/index.html</a> </p>
<p></p><h2>全球協同</h2>
<p>網路的普及促成全球協同, 分散式版次管理工具(例如: <a href="https://git-scm.com/">Git</a>、<a href="https://www.mercurial-scm.org/">Mercurial</a>、<a href="https://www.fossil-scm.org">Fossil SCM </a>等)則提供協同者明確清楚的運作模式, 至於 <a href="https://github.com/">Github</a> 與 <a href="https://about.gitlab.com/pricing/">Gitlab</a> 等分散式版次伺服代管服務系統, 更大幅催化各種程式系統的開發速度.</p>
<p>網路 - 連接全球客戶端與伺服器端電腦</p>
<p>分散式版次管理工具 - 提供明確清楚展示改版歷程的運作模式與流程</p>
<p>Github - 分散式版次代管服務系統</p>
<p>電腦程式開發 - 在 <a href="https://github.com/">Github</a> 全球協同架構下, 許多知名電腦軟體套件正快速發展中</p>
<h4>Reveal 網際簡報系統</h4>
<p><a href="https://github.com/hakimel/reveal.js/">https://github.com/hakimel/reveal.js/</a> </p>
<h4>Pelican 靜態網誌建構系統</h4>
<p><a href="https://github.com/getpelican/pelican">https://github.com/getpelican/pelican</a> </p>
<h4>Leo Editor 多元資料管理系統</h4>
<p><a href="https://github.com/leo-editor/leo-editor">https://github.com/leo-editor/leo-editor</a> </p>
<h4></h4>
<h1>實習任務</h1>
<p>2019 年的網際內容管理課程, 將從 Google Blogger 與 Github 的使用開始, 使用者利用學校配發的 Gmail 帳號, 登入後, 連結至 <a href="https://www.blogger.com">https://www.blogger.com</a> 就可以著手建立個人的 Blogger 網誌, 而 Github 帳號, 也是先登入學校配發的 Gmail 帳號後, 連結至 <a href="https://www.github.com">https://www.github.com</a> 後, 利用學號作為帳號, sign up 新帳號後, 至 Gmail 區進行 email 驗證後, 就可以利用</p>
<p>Git 教材: <a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> </p>
<p>Github 教材: <a href="https://lab.github.com/">https://lab.github.com/</a>  (已經以 scrum-1 帳號開始<a href="https://github.com/scrum-1/github-slideshow">學習流程</a>)</p>
<p>開始熟悉 git 與 github 的用法.</p>
<h2>實習任務一</h2>
<h4><span>學習要點</span></h4>
<p>本學期的課程將從 <a href="https://www.blogger.com">https://www.blogger.com</a> 的個人動態網誌建立與維護開始, 讓使用者可以隨時利用瀏覽器, 維護個人網誌內容.</p>
<p>接著再由 Github 帳號的建立, 逐步透過 Github Pages 靜態網頁的建立, 讓使用者體會如何在多人協同的環境中, 共同維護網際內容.</p>
<h4>實習任務一</h4>
<ol>
<li>請登入學校配發的 Gmail 帳號, 連結至 <a href="https://www.blogger.com">https://www.blogger.com</a>, 建立屬於個人的動態網誌系統.</li>
<li>請在登入 Gmail 帳號後, 連結至 <a href="https://github.com/">https://github.com/</a> , 以學號建立個人帳號, 接下來學習如何在此一 Github 帳號下,  參考 <a href="https://www.tutorialspoint.com/html5/html5_tutorial.pdf">html5_tutorial.pdf</a> (<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5">html5 中文簡體文件</a>), 建立個人的 <a href="https://pages.github.com/">Github Pages</a></li>
</ol>
<h4>實習問題:</h4>
<ol>
<li>何謂瀏覽器 (<a href="https://en.wikipedia.org/wiki/Web_browser">Web Browser</a>)?</li>
<li>何謂網際伺服器 (<a href="https://en.wikipedia.org/wiki/Web_server">Web Server</a>)?</li>
<li>何謂超文件 (<a href="https://en.wikipedia.org/wiki/Hypertext">Hypertext</a>)?</li>
<li>何謂超文件傳輸協定 (<a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP</a>)?</li>
<li>如何利用個人的 Github 帳號, 建立個人的<a href="https://en.wikipedia.org/wiki/Static_web_page">靜態網站</a>? (提示: 透過 Github - Settings - Github Pages - Source 指定要使用的倉儲分支)</li>
<li>如何收集各班各學員的個人動態網誌連結, 呈現在個人的 <a href="https://pages.github.com/">Github 靜態網站</a>上? (提示: 透過 <a href="https://ethercalc.net/">https://ethercalc.net/</a> )</li>
<li>(五專部) <a href="https://en.wikipedia.org/wiki/Pathways_in_Technology_Early_College_High_School">P-Tech</a> 還沒有中文頁面, 誰來幫它建立中文頁面, 同時納入台灣國立科大重啟五專招生的相關訊息? (<a href="https://www.ibm.com/news/tw/zh/2018/09/10/H081319Z45690J47.html">IBM P-Tech info</a>, <a href="/downloads/taiwan_ptech_program_init.pdf">pdf</a>), <a href="/downloads/junior_colleges_reborn_2018.pdf">台灣重啟五專新聞.pdf</a></li>
</ol>
<p>Pathways in Technology Early College High School (技術導向早期學院高中): <a href="http://www.ptech.org/">http://www.ptech.org/</a> </p>
<h4>相關術語:</h4>
<p>Wikipedia - <a href="https://en.wikipedia.org/wiki/Wikipedia">https://en.wikipedia.org/wiki/Wikipedia</a> </p>
<p>Junior College: <a href="https://en.wikipedia.org/wiki/Junior_college">https://en.wikipedia.org/wiki/Junior_college</a> </p>
<p>Middle College Program: <a href="https://en.wikipedia.org/wiki/Middle_College_Program">https://en.wikipedia.org/wiki/Middle_College_Program</a> </p>
<p>Early College High School: <a href="https://en.wikipedia.org/wiki/Early_college_high_school">https://en.wikipedia.org/wiki/Early_college_high_school</a> </p>
<p>Gmail 帳號 - <a href="https://en.wikipedia.org/wiki/Gmail">https://en.wikipedia.org/wiki/Gmail</a> </p>
<p>Blogger - <a href="https://en.wikipedia.org/wiki/Blogger_(service)">https://en.wikipedia.org/wiki/Blogger_(service)</a> </p>
<p>網誌 (blog) - <a href="https://en.wikipedia.org/wiki/Blog">https://en.wikipedia.org/wiki/Blog</a> </p>
<p>靜態網頁- <a href="https://en.wikipedia.org/wiki/Static_web_page">https://en.wikipedia.org/wiki/Static_web_page</a> </p>
<p>動態網頁 - <a href="https://en.wikipedia.org/wiki/Dynamic_web_page">https://en.wikipedia.org/wiki/Dynamic_web_page</a> </p>
<p>Github 帳號 - <a href="https://en.wikipedia.org/wiki/GitHub">https://en.wikipedia.org/wiki/GitHub</a> </p>
<p>Github 靜態網站 - <a href="https://pages.github.com/">https://pages.github.com/</a> </p>
<h4>參考資料:</h4>
<p>以 disk1 在 Goodkym 達康建立的 <a href="https://2019wcm.blogspot.com/">https://2019wcm.blogspot.com/</a> </p>
<p>HTML5 Solutions: Essential Techniques for HTML5 Developers (2011)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-3387-9">https://link.springer.com/book/10.1007/978-1-4302-3387-9</a> </p>
<p>The Definitive Guide to HTML5 WebSocket (2013)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-4741-8">https://link.springer.com/book/10.1007/978-1-4302-4741-8</a> </p>
<p>Essential HTML fast (1998)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4471-1541-0">https://link.springer.com/book/10.1007/978-1-4471-1541-0</a> </p>
<p>Beginning Node.js (2014)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-0187-9">https://link.springer.com/book/10.1007/978-1-4842-0187-9</a> </p>
<p>Beginning Functional JavaScript (2018)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-4087-8">https://link.springer.com/book/10.1007/978-1-4842-4087-8</a> </p>
<h4>學習評量</h4>
<ol>
<li>請各學員在完成本實習任務後, 嘗試利用  <a href="https://getsharex.com/">https://getsharex.com/</a> 錄製具備影音內容的學習心得影片, 以「國立虎尾科技大學-機械設計工程系 (or 精密機械工程科) - 網際內容管理 - 學號 - 實習任務一學習心得」作為標題, 並且上傳到個人的 <a href="https://www.youtube.com/">https://www.youtube.com/</a> 帳號區.</li>
<li>請各學員分別在全體學員上傳心得影片後, 選出個人認為內容說明最為詳實的影片 (How?).</li>
<li>收集學員網誌連結: <a href="https://goo.gl/forms/6YyFcSL5KSUWSUBH3">https://goo.gl/forms/6YyFcSL5KSUWSUBH3</a> </li>
</ol>
<h3>task1 Q&amp;A</h3>
<h4>Q1: 學員已經到課, 但是忘記在雲端點名刷卡, 要求教師消除遲到或曠課紀錄.</h4>
<p>A1: 利用刷卡機紀錄學生上課出席狀況, 原本是立意良善, 但是先前的雲端點名網站並沒有 https 的資料編碼設置, 而是在 http 的明碼傳輸下, 要求使用者登入系統, 因此在上學期之前, 都會要求學生採紙本申請銷曠課紀錄, 造成許多困擾.</p>
<p>2019 Spring 開始, <a href="https://rollcall.nfu.edu.tw">https://rollcall.nfu.edu.tw</a> 已經支援 https 資料傳輸, 因此教師已經可以直接登入後處理雲端點名事宜.</p>
<p>只是, 這種希望留住學生屁股而非腦袋的作法, 據信已經不是最佳方法, 甚至有許多學生刷完卡後, 就直接以長時間上廁所當作藉口而進行翹課, 因此現階段雲端點名紀錄的實際作用, 只是用來收集學生證點名刷卡紀錄, 對於反應學生是否實際到課的情況, 並無太大助益.</p>
<p>由於本課程在電腦教室上課, 按照學號每人一個固定座位, 且採用多人分組與分散式版次管理系統註記, 每一學員的實習任務執行, 都透過提交登錄在各學員的 Github 倉儲, 因此上課時段一到, 就可以清楚各組是否有學員遲到或缺席, 且在各週任務導向的課程內容安排下, 可以清楚透過學生自評與互評系統, 了解學生的實際工作內容, 完全不用採計雲端點名系統中的內容.</p>
<h4>Q2: 為何電腦輔助設計室中的電腦, 有三個 RJ45 網路卡的插槽? 有何作用?</h4>
<p>A2: 雖然這批電腦已經購入超過兩年, 但是 CPU 為 intel i7 第四代晶片, 且配有 16 GB 的記憶體, 因此在啟用 <a href="https://www.intel.com/content/www/us/en/virtualization/virtualization-technology/intel-virtualization-technology.html">vt</a> 功能的情況下, 除了第三磁區的實體 Windows 10 之外, 至少可以再透過 <a href="https://www.virtualbox.org/wiki/Downloads">Virtualbox</a>, 配置兩台虛擬主機, 而這兩台虛擬主機可以啟用另一台 Windows 10, 讓學員練習測試各種操作, 並且在另一台虛擬主機安裝 Ubuntu 18.04 伺服器, 可用來建構網際內容伺服器, 讓學員了解如何自行建立並配置與機械設計流程有關的網際服務.</p>
<p>在上述同時啟用一台實體 Windows 10, 兩台虛擬主機的情況下, 為了讓各客戶電腦或虛擬伺服器能夠擁有獨立的連外網路頻寬, 就可以將三台主機分別導流到三片實體網路卡, 以提升三台主機共用一片實體網路卡連線的效益.</p>
<h4>Q3: 當 Github Pages 上的 CMSimfly 倉儲與 Heroku 上的動態 CMSimfly 設定同步後, 若再以管理者帳號登入 Heroku 上的 CMSimfly 修改資料, 有可能造成動態 CMSimfly 上的資料與 Github Pages 上的版本不同步, 且在多人連線下, 甚至讓 Heroku 動態 CMSimfly 上的資料完全消失.</h4>
<p>A3: Heroku 上的動態 CMSimfly 資料消失, 是一個已知的 bug, 目前尚無法處理, 有待修正.</p>
<p>至於若兩端設定同步後, 資料版本是由 Github Pages 上的倉儲確定後, 再同步到 Heroku 的動態 CMSimfly 上, 因此若因為編輯 Heroku 上的資料而造成不同步, 只需要在 Github Pages 倉儲中進行改版後提交, Heroku 上的動態 CMSimfly 就會自動同步.</p>
<p></p>
<h2>實習項目二</h2>
<h4>導入可攜程式環境</h4>
<p>測試利用 IPv6 SSH config 代理主機改版</p>
<p>自行建立 Windows 10 環境下的 ANSI C 與 Python 3.7.2 程式環境</p>
<p style="padding-left: 30px;">啟動與關閉  - 利用 <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst">subst</a> 指令簡化 <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/path">path</a> 設定流程</p>
<p style="padding-left: 30px;">ANSI C - 採用 <a href="http://download.savannah.gnu.org/releases/tinycc/">http://download.savannah.gnu.org/releases/tinycc/</a> </p>
<p style="padding-left: 30px;">Python - Python 3.7.2 (原始安裝約 65 MB)</p>
<p style="padding-left: 30px;">SciTE - <a href="https://www.scintilla.org/SciTE.html">https://www.scintilla.org/SciTE.html</a> </p>
<p style="padding-left: 30px;">Git - 採用 <a href="https://git-scm.com/">https://git-scm.com/</a> 可攜版本</p>
<p style="padding-left: 30px;">Python 模組 - <a href="http://flask.pocoo.org/">Flask</a>, <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">bs4</a>, <a href="https://www.riverbankcomputing.com/software/pyqt/download5">pyqt5</a>, <a href="http://leoeditor.com/">leo</a>, <a href="https://blog.getpelican.com/">pelican</a>, <a href="https://github.com/lxml/lxml">lxml</a>, <a href="https://pypi.org/project/Markdown/">markdown</a></p>
<p style="padding-left: 60px;">Flask, bs4 and lxml is for CMSimfly</p>
<p style="padding-left: 60px;">pyqt5 is for Leo Editor</p>
<p style="padding-left: 60px;">pelican, and markdown is for Pelican Blog</p>
<p style="padding-left: 60px;">安裝上述模組後, p37 容量約 420 MB</p>
<h4>下載 <a href="https://drive.google.com/file/d/1Cw8mHRcHKIZj7K7_m6x_af4vzo89539a/view?usp=sharing">kmol_2019.7z</a></h4>
<h4>下載 <a href="https://drive.google.com/file/d/1G3cEZsw6d7NjqLLgu9jljVNBd6wF-ZrG/view?usp=sharing">nodejs_with_ungit.7z</a></h4>
<p>其他工具:</p>
<p style="padding-left: 30px;"><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer">https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer</a> </p>
<p style="padding-left: 30px;"><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/zoomit">https://docs.microsoft.com/en-us/sysinternals/downloads/zoomit</a> </p>
<p style="padding-left: 30px;"><a href="https://getsharex.com/">https://getsharex.com/</a> </p>
<p style="padding-left: 30px;"><a href="https://mh-nexus.de/en/hxd/">https://mh-nexus.de/en/hxd/</a> </p>
<p style="padding-left: 30px;"><a href="https://devcenter.heroku.com/articles/heroku-cli">https://devcenter.heroku.com/articles/heroku-cli</a> </p>
<p style="padding-left: 30px;"><a href="https://www.lua.org/">https://www.lua.org/</a> </p>
<p style="padding-left: 30px;"><a href="https://nodejs.org/en/">https://nodejs.org/en/</a> </p>
<p style="padding-left: 30px;"><a href="http://kdiff3.sourceforge.net/">http://kdiff3.sourceforge.net/</a> </p>
<p style="padding-left: 30px;"><a href="https://pandoc.org/">https://pandoc.org/</a> </p>
<p style="padding-left: 30px;"><a href="https://miktex.org/">https://miktex.org/</a> </p>
<p style="padding-left: 30px;"><a href="http://solvespace.com">http://solvespace.com</a> </p>
<p style="padding-left: 30px;"><a href="http://www.coppeliarobotics.com/">http://www.coppeliarobotics.com/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.fossil-scm.org">https://www.fossil-scm.org</a> </p>
<p style="padding-left: 30px;"><a href="https://www.freecadweb.org/">https://www.freecadweb.org/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.blender.org/">https://www.blender.org/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.msys2.org/">https://www.msys2.org/</a> </p>
<p style="padding-left: 30px;"><a href="https://cython.org/">https://cython.org/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.boost.org/">https://www.boost.org/</a> </p>
<p style="padding-left: 30px;"><a href="https://cmake.org/">https://cmake.org/</a> </p>
<p style="padding-left: 30px;"><a href="http://www.gnuplot.info/">http://www.gnuplot.info/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.sqlite.org">https://www.sqlite.org</a> </p>
<p style="padding-left: 30px;"><a href="https://sourceforge.net/projects/xming/">https://sourceforge.net/projects/xming/</a> </p>
<p style="padding-left: 30px;"><a href="https://filezilla-project.org/">https://filezilla-project.org/</a> </p>
<h4>Git 與 Github</h4>
<p>Git 教材: <a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> </p>
<p>Github 教材: <a href="https://lab.github.com/">https://lab.github.com/</a>  (已經以 scrum-1 帳號開始<a href="https://github.com/scrum-1/github-slideshow">學習流程</a>)</p>
<hr/>
<h4><a href="https://nodejs.org/en/">Nodejs</a> 與 <a href="https://github.com/FredrikNoren/ungit">Ungit</a></h4>
<p>ungit 是一個網際 git 客戶端圖形化工具, 以 node.js 開發, 啟動時需要 git、node.js 與 npm. 將 ungit 製作成可攜系統, 必須下載 node.js 安裝後, 再安裝 ungit, 接著取下 c:\program files\nodejs 與 c:\users\用戶名稱\AppData\roaming\npm 及 npm-cache 放入 nodejs 中的 appdata 目錄, 並將整個 nodejs 目錄放入可攜 data 目錄,  並設定命令列搜尋路徑:</p>
<p>set path8=%Disk%:\nodejs;%Disk%:\nodejs\appdata\roaming\npm;</p>
<p>可攜系統即可透過指令進入 github 倉儲中, 以 ungit 進行圖形化操作.</p>
<p>此外, ungit 啟動程式碼中, 必須蓋掉擷取操作系統使用者的設定, 以便讓 ungit 導引 git 使用可攜系統 home 目錄中的 .gitconfig 設定.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#!/bin/sh
basedir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

# 必須關掉下列設定, 讓 ungit 可以導引 git 讀取 y:\home 下的 .gitconfig 設定
#case `uname` in
    #*CYGWIN*) basedir=`cygpath -w "$basedir"`;;
#esac

if [ -x "$basedir/node" ]; then
  "$basedir/node"  "$basedir/node_modules/ungit/bin/ungit" "$@"
  ret=$?
else 
  node  "$basedir/node_modules/ungit/bin/ungit" "$@"
  ret=$?
fi
exit $ret</pre>
<p>利用 ungit 執行 <a href="https://github.com/mdecourse/cmstest">cmstest 倉儲</a>改版提交與推送畫面:</p>
<p><img alt="" height="819" src="/images/ungit_on_cmstest_repository.png" width="800"/></p>
<p>在實際操作 ungit 過程, 由於在 Windows 10 環境會啟動 Edge 瀏覽器, 若要在啟動 ungit 時使用 Google Chrome 瀏覽器 (或其他瀏覽器), 必須使用下列指令:</p>
<p>ungit --launchBrowser=0 --launchCommand "C:\PROGRA~2\Google\Chrome\Application\chrome.exe  %U"</p>
<p>其中, <span>PROGRA~2 為 "Program Files (x86)" 的縮寫 (註: PROGRA~1 為 "Program Files" 的縮寫), 且 %U 為 ungit 啟動時對應倉儲目錄的 URL 資料.</span></p>
<p><span>因此上述指令意指, 啟動 ungit 時, 不要使用內建設定的 Edge 瀏覽器, 而是執行隨後的指令, 而該指令即透過縮寫的目錄名稱, 對應 "C:\Program Files (x86)", 針對目前所在的倉儲目錄, 以 Google Chrome 瀏覽器開啟 ungit 的網際倉儲連結.</span></p>
<p><span>為了簡化上述指令的呼叫, 可以將上述指令改為: </span></p>
<p><span>ungit --launchBrowser=0 --launchCommand "C:\PROGRA~2\Google\Chrome\Application\chrome.exe  %%U"</span></p>
<p><span>並以 SciTE 編輯器存入 Y:\kungit.bat 批次檔案中, 當使用者以命令列進入特定倉儲時, 只要輸入 kungit 即可呼叫此一 ungit 指令執行.</span></p>
<p>上述以批次檔案執行的 %%U, 表示要在 Windows command 中列出 %U, 因為 "%" 符號在批次檔案中具有特定意義, 因此要在批次檔案中列出 "%", 必須使用 "%%", 其他相關詳細說明, 請參考 <a href="https://ss64.com/nt/syntax-esc.html">https://ss64.com/nt/syntax-esc.html</a> </p>
<h3>ANSI C</h3>
<h4>KMOL 2019 Spring 所採用的可攜程式環境:</h4>
<p><a href="https://drive.google.com/file/d/1_TQBw1PM7jxrmtsBjvLKbjJWfGs8Ug79/view?usp=sharing">cdb_w5 版本.7z</a><span><span> </span>(470 MB, 解開後 1.3 GB, wcm 與 cd 課程共用版本)<span> </span></span></p>
<p>KMOL 課程 (指計算機程式、網際內容管理、電腦輔助設計實習與協同產品設計實習) 所使用的可攜系統中, 採用 <a href="https://bellard.org/tcc/">Tiny C</a> 作為 ANSIC 程式編譯系統, 且透過 SciTE 編輯器的設定, 讓 ANSI C 程式的執行與解譯程式 (如 Python 與 Lua) 類似, 可以直接在 SciTE 編輯器中執行簡單的運算程式, 或利用 <a href="https://bellard.org/tcc/">Tiny C</a> 將 C 程式編譯為 Python  或 Lua 可以呼叫的動態程式庫.</p>
<p>由於 ANSI C 程式編譯後執行的速度遠快於 Python 或 Lua, 但是利用解譯程式呼叫動態連結庫的方式進行數值分析運算, 可以同時取得調控彈性高與執行速度快的好處, 因此 KMOL 才將可攜程式套件以 <a href="https://bellard.org/tcc/">Tiny C</a> 結合 Python3 與 Lua 5.1.5 的方式進行配置.</p>
<p>以下為 <a href="https://bellard.org/tcc/">Tiny C</a> 的相關應用:</p>
<h4>利用 Tiny C 編譯 Tiny C</h4>
<p>使用者可以從 <a href="http://download.savannah.gnu.org/releases/tinycc/">http://download.savannah.gnu.org/releases/tinycc/</a> 下載 tcc-0.9.27.tar.bz2, 也就是 0.9.27 版的 Tiny C 編譯程式原始碼, 然後利用 KMOL 可攜程式中的 <a href="https://bellard.org/tcc/">Tiny C</a> 對此 ANSI C程式碼進行編譯, 建立 0.9.27 版的 tcc.exe</p>
<p>啟動 KMOL 可攜程式後, 在 Dos 命令列中進入 0.9.27 原始碼中的 win32 目錄, 將其中 build-tcc.bat 檔案中的 </p>
<p>      set CC=gcc</p>
<p>改為</p>
<p>     set CC=tcc</p>
<p>然後執行此一 build-tcc.bat 檔案, 就可以編譯出所需的 tcc.exe, libtcc.dll 與 i386-win32-tcc.exe 等三個檔案.</p>
<h4>利用 ANSI C 程式解數值分析</h4>
<p>參考資料: </p>
<p><a href="http://mde.tw/cp2018/content/數值分析.html">http://mde.tw/cp2018/content/數值分析.html</a></p>
<p><a href="https://github.com/libsbmlsim/libsbmlsim">https://github.com/libsbmlsim/libsbmlsim</a> (<a href="https://fun.bio.keio.ac.jp/software/libsbmlsim/">libsbmlsim</a>)</p>
<p><a href="http://sbml.org/Basic_Introduction_to_SBML">http://sbml.org/Basic_Introduction_to_SBML</a></p>
<p>以 <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods">Runge-Kutta</a> 解常微分方程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// C program to implement Runge Kutta method 
#include&lt;stdio.h&gt; 
  
// A sample differential equation "dy/dx = (x - y)/2" 
float dydx(float x, float y) 
{ 
    return((x - y)/2); 
} 
// Finds value of y for a given x using step size h 
// and initial value y0 at x0. 
float rungeKutta(float x0, float y0, float x, float h) 
{ 
    // Count number of iterations using step size or 
    // step height h 
    int n = (int)((x - x0) / h); 
  
    float k1, k2, k3, k4, k5; 
  
    // Iterate for number of iterations 
    float y = y0; 
    for (int i=1; i&lt;=n; i++) 
    { 
        // Apply Runge Kutta Formulas to find 
        // next value of y 
        k1 = h*dydx(x0, y); 
        k2 = h*dydx(x0 + 0.5*h, y + 0.5*k1); 
        k3 = h*dydx(x0 + 0.5*h, y + 0.5*k2); 
        k4 = h*dydx(x0 + h, y + k3); 
  
        // Update next value of y 
        y = y + (1.0/6.0)*(k1 + 2*k2 + 2*k3 + k4);; 
  
        // Update next value of x 
        x0 = x0 + h; 
    } 
  
    return y; 
} 

// Driver method 
int main() 
{ 
    float x0 = 0, y = 1, x = 2, h = 0.2; 
    printf("\nThe value of y at x is : %f\n", 
            rungeKutta(x0, y, x, h)); 
    return 0; 
} </pre>
<h4>利用 ANSI C 編寫 Python 3 呼叫用 dll</h4>
<p>首先, 建立一個 multiply.c 程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int multiply(int, int);
 
__declspec(dllexport) int
multiply(int num1, int num2)
{
return num1 * num2;
}</pre>
<div>
<div class="syntaxhighlighter c" id="highlighter_631405"></div>
</div>
<p>利用下列指令, 將 multiply.c 編譯為動態連結庫 myltiply.dll</p>
<p>tcc -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE multiply.c -o multiply.dll</p>
<p>接著利用下列 Python3 程式, 透過 ctypes 模組導入 multiply.dll, 並且執行動態連結程式庫中的 multiply() 函式.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import ctypes
 
lib = ctypes.CDLL('multiply.dll')
result = lib.multiply(3, 2)
print(result)</pre>
<div>
<div class="syntaxhighlighter python" id="highlighter_374291"></div>
</div>
<p>因為<span> </span><a href="https://docs.python.org/3/library/ctypes.html">ctypes</a><span> </span>內建傳回值為 int, 因此若 C 對應動態連結庫輸入或傳回值為浮點數, 就必須手動宣告.</p>
<p>例如, 將上述函式的輸入與輸出均由 int 改為 float 如下:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// multiply2.c
#include &lt;stdio.h&gt;
 
float multiply(float, float);
 
__declspec(dllexport) float
multiply(float num1, float num2)
{
return num1 * num2;
}</pre>
<div>
<div class="syntaxhighlighter c" id="highlighter_489981"></div>
</div>
<p>可利用下列指令, 將 multiply2.c 編譯為動態連結庫 myltiply2.dll</p>
<p>tcc -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE multiply2.c -o multiply2.dll</p>
<p>但是 Python3 程式部份就必須改為:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import ctypes
 
lib = ctypes.CDLL('multiply2.dll')
# By default functions are assumed to return the C int type. Other return types can be specified by setting the restype attribute of the function object.
lib.multiply.restype = ctypes.c_float
result = lib.multiply(ctypes.c_float(3.0), ctypes.c_float(2.0))
print(result)</pre>
<div>
<div class="syntaxhighlighter python" id="highlighter_532977"></div>
</div>
<h4>導入 tinycc 模組</h4>
<p>除了直接利用 Tiny C 編譯能讓 Python 3 呼叫的動態連結程式庫外, 也可以導入 <a href="https://github.com/SasView/tinycc">https://github.com/SasView/tinycc</a> (<a href="/downloads/tinycc-1.1.zip">tinycc-1.1.zip</a>), 並將 tcc.exe 所在目錄設於啟動批次檔案中:</p>
<p>set TCC_ROOT=%Disk%:\tcc</p>
<p>之後使用者就能利用:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from tinycc import compile
dll_path = compile("multiply.c")</pre>
<p>建立所需的 multiply.dll, 其中 multiply.c 內容:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int multiply(int, int);
 
int multiply(int num1, int num2)
{
    return num1 * num2;
}</pre>
<p>而對應的 multiply.py 內容如下:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import ctypes
 
lib = ctypes.CDLL('multiply.dll')
result = lib.multiply(3, 2)
print(result)</pre>
<h4>另外一個有趣的應用, 就是利用 <a href="https://bellard.org/tcc/">Tiny C</a> 編譯 <a href="https://www.fossil-scm.org">Fossil SCM</a></h4>
<p>因為 <a href="https://www.fossil-scm.org">Fossil SCM</a> 也是採用 ANSI C 格式編寫, 因此從 <a href="https://www.mail-archive.com/fossil-users@lists.fossil-scm.org/msg11086.html">https://www.mail-archive.com/fossil-users@lists.fossil-scm.org/msg11086.html</a> 與 <a href="http://lists.nongnu.org/archive/html/tinycc-devel/2014-03/msg00086.html">http://lists.nongnu.org/archive/html/tinycc-devel/2014-03/msg00086.html</a> 討論中, 可以利用 <a href="https://bellard.org/tcc/">Tiny C</a><span><span> </span></span> 編譯 <a href="https://www.fossil-scm.org">Fossil SCM</a><span><span> , 但是僅能在 Linux 環境, </span></span> Windows 10 上的 <a href="https://www.fossil-scm.org">Fossil SCM</a>, 則可使用 <a href="https://www.msys2.org/">MSYS2</a> (<a href="http://lab.kmol.info/blog/msys2_compile_fossil_scm.html">http://lab.kmol.info/blog/msys2_compile_fossil_scm.html</a>)</p><h3>Lua</h3>
<p>根據 <a href="http://demon.tw/programming/tiny-c-compiler-lua.html">http://demon.tw/programming/tiny-c-compiler-lua.html</a>, 可以利用 Tiny C 編譯 Lua 原始碼:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
setlocal enabledelayedexpansion
:: By Demon
:: http://demon.tw
set tcc=y:\tcc\tcc.exe
2&gt;nul del *.exe *.a
if exist src\luac rmdir /s /q src\luac
for /f "delims=" %%i in (
    'dir /s /b src\*.c'
) do (
    if not "%%~nxi" == "lua.c" (
        if not "%%~nxi" == "luac.c" set src=!src! "%%i"
    )
)
set tcc=%tcc% -Iinclude -Isrc -w
if exist src\lua set lua=lua\
%tcc% -o lua.exe %src% src\%lua%lua.c
lua.exe</pre>
<p></p><h3>Git 設定</h3>
<p><span>使用</span><br/><br/><span>git config --edit --system</span><br/><br/><span>可以帶出 vi 編輯器, 編輯 git 指令所使用的系統設定, 只要將 credential 項目中的 helper = manager 刪除後儲存, 即可關閉內定將使用者 Github 帳號密碼儲存於操作系統的問題.</span><br/><br/><span>建立 OpenSSH 格式的 Private 與 Public Keys</span><br/><br/><span>接下來, 在可攜系統的命令列視窗中, 以 sh 執行 Git 的 shell, 使用</span><br/><br/><span>ssh-keygen -t rsa -b 4096 -C "This is my key"</span><br/><br/><span>建立位於 y:\home\.ssh\id_rsa 的 Private Key 與位於 y:\home\.ssh\id_rsa.pub 的 Public Key, 並且將 id_rsa.pub 的內容, 轉貼到 Github 帳號 settings 中 SSH and GPG keys 項目內的 SSH Public Key 區.</span><br/><br/><span>使用 ssh 協定執行 git clone</span><br/><br/><span>為了採用 OpenSSH 協定執行登入認證, 使用者在近端 git clone 倉儲時, 必須使用類似 git@github.com:帳號/倉儲.git 的連線 URL</span><br/><br/><span>例如:<span> </span></span><br/><br/><span>要將<span> </span></span><a href="https://github.com/mdecourse/wcm2019">https://github.com/mdecourse/wcm2019</a><span><span> </span>的倉儲, 以 ssh 協定 git clone 到近端時, 必須使用:</span><br/><br/><span>git clone git@github.com:mdecourse/wcm2019.git</span><br/><br/><span>建立位於 wcm2019 的倉儲目錄, 而 git add ., git commit -m 與 git push 的指令則與採 http 連線時的指令相同. 只是採用 ssh 連線下的 git push, git 會讀取位於 y:\home\.ssh\id_rsa Private Key 與 Github 帳號上所設定的 Public Key 進行比對, 若同為一個 pair, 則通過認證, 可將改版的資料推送到遠端倉儲中.</span><br/><br/><span>上述 ssh 協定下的 git clone 與 git push, 配合 ungit 使用時, 可以直接輸入提交訊息後, 以 commit &amp; push 將近端版本提交推送到遠端.</span><br/><br/><span>ssh 連線透過 proxy server, 必須設定 y:\home\.ssh\config 如下:</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy_server_name:3128 %h %p
 
Host github.com
User git
Port 22
Hostname github.com
 
IdentityFile "y:\home\.ssh\id_rsa"
 
TCPKeepAlive yes
IdentitiesOnly yes
 
Host ssh.github.com
User git
Port 443
Hostname ssh.github.com
 
IdentityFile "y:\home\.ssh\id_rsa"
 
TCPKeepAlive yes
IdentitiesOnly yes</pre>
<h4>實際操作問題</h4>
<ol>
<li>Github 原先 Clone or Download 按鈕下提供 https 與 ssh 等兩種連線協定, 但是目前已去除倉儲中的 ssh 連結, 原因不明.</li>
<li>上述 ssh 以系上 proxy server 作為跳板, 進行 Github 倉儲連線後, 該代理主機被校網防火牆判定為 IPS 攻擊而斷線, 具體原因亦不明.</li>
</ol><h3>GIT Tools</h3>
<p>GitExtensions: <a href="https://github.com/gitextensions/gitextensions">https://github.com/gitextensions/gitextensions</a> (<a href="https://drive.google.com/open?id=1_pH2cKAGeH3OGwZUFPJwsi7WcX3ELvph">GitExtensions.7z</a>)</p>
<p><span>使用 ssh 與 Github 倉儲連線時, 必須使用 OpenSSH, 而非 putty.</span><br/><br/><span>GitExtensions 的設定位於 Tools - Settings, 與 KMOL 可攜系統配合的 HOME 設定, 位於 Git - Paths 下, 目前若以不同 HOME 啟動 start.bat, 使用 GitExtensions 前必須先確定 HOME 與 start.bat 中所使用的 HOME 設定一致, 否則 git push 時 OpenSSH 將無法正確讀取與 Github 帳號 public key 對應 HOME 目錄下 .ssh 中的 private key.</span></p><h3>Blogger API</h3>
<p>Blogger: <a href="https://www.blogger.com">https://www.blogger.com</a></p>
<p><a href="https://developers.google.com/blogger/">https://developers.google.com/blogger/</a></p>
<p><a href="https://pypi.org/project/google-api-python-client/">https://pypi.org/project/google-api-python-client/</a></p>
<p><a href="https://developers.google.com/resources/api-libraries/documentation/blogger/v3/python/latest/">https://developers.google.com/resources/api-libraries/documentation/blogger/v3/python/latest/</a></p>
<p><a href="https://developers.google.com/api-client-library/python/">https://developers.google.com/api-client-library/python/</a></p>
<p><a href="https://developers.google.com/apis-explorer/">https://developers.google.com/apis-explorer/</a></p>
<p><a href="https://developers.google.com/blogger/docs/3.0/using">https://developers.google.com/blogger/docs/3.0/using</a></p>
<p><a href="https://developers.google.com/blogger/docs/3.0/reference/">https://developers.google.com/blogger/docs/3.0/reference/</a></p>
<p><a href="https://stackoverflow.com/questions/48527480/insert-a-draft-blog-post-using-blogger-api-v3-with-python">https://stackoverflow.com/questions/48527480/insert-a-draft-blog-post-using-blogger-api-v3-with-python</a></p>
<p><a href="https://github.com/googleapis/google-api-python-client/blob/master/samples/blogger/blogger.py">https://github.com/googleapis/google-api-python-client/blob/master/samples/blogger/blogger.py</a></p>
<p><a href="http://www.easonhsu.idv.tw/2017/01/use-blogger-python-api-to-publish-from.html">http://www.easonhsu.idv.tw/2017/01/use-blogger-python-api-to-publish-from.html</a></p>
<p><a href="https://pypi.org/project/EasyBlogger/">https://pypi.org/project/EasyBlogger/</a></p><h3>Blogger API 應用</h3>
<h4>Blogger API 入門</h4>
<p><a href="https://developers.google.com/blogger/docs/3.0/getting_started">https://developers.google.com/blogger/docs/3.0/getting_started</a> </p>
<p>Blogger is built on five basic concepts:</p>
<ol>
<li>Blogs: The root concept of the API. A blog has posts and pages. This is the container for blog meta-information like blog name and Description.</li>
<li>Posts: A blog post is the publishable item that the blog author has created. This information is meant to be timely, reflecting what the authors want to publish to the world now. It is understood that as time passes, blog posts content ages and becomes less relevent.</li>
<li>Comments: A comment is the place where people other than the blog post author react to what the author has written. Everything from bricks to bouquets.</li>
<li>Pages: A page is a place for static content, such as biographical information, or the ways to contact the user. This is generally timeless information that doesn't change very often.</li>
<li>Users: A user is someone who interacts with Blogger, be they acting as an Author, an Administrator, or just a Reader. For public blogs, readers may be anonymous, but on private blogs a reader must be identified by Blogger.</li>
</ol>
<h4>使用 Blogger API</h4>
<p><a href="https://developers.google.com/blogger/docs/3.0/using">https://developers.google.com/blogger/docs/3.0/using</a> </p>
<p>登入 Blogger 對應帳號後, 以 <a href="https://www.blogger.com">https://www.blogger.com</a> 連結, 可以取得對應 blogID.</p>
<p><a href="https://2019wcm.blogspot.com/">https://2019wcm.blogspot.com/</a> 之 blogID=5276710004996457925</p>
<p>透過 <a href="https://www.googleapis.com/blogger/v3/blogs/5276710004996457925">https://www.googleapis.com/blogger/v3/blogs/5276710004996457925</a> 可以檢視未登入透過 blogID 讀取資料所傳回的訊息</p>
<h4>Blogger API 參考</h4>
<p><a href="https://developers.google.com/blogger/docs/3.0/reference/">https://developers.google.com/blogger/docs/3.0/reference/</a> </p>
<p>參考程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">__author__ = 'disk1 At goodkym.com'

import sys
from oauth2client import client
from googleapiclient import sample_tools

argv = ""
# 認證並建立服務
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, __file__,
  scope='https://www.googleapis.com/auth/blogger')

try:
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    for blog in blogs['items']:
        print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 blog id
    '''
    body = {
    "kind": "blogger#post",
    "id": "5276710004996457925",
    "title": "透過 Python 程式新增網誌文章",
    "content":"使用 Google Blogger API 可以利用程式新增網誌文章內容"
    }
    insert = posts.insert(blogId='5276710004996457925', body=body)
    posts_doc = insert.execute()
    print(posts_doc)
    '''
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": "透過 Python 程式修改網誌文章",
    "content":'''使用 Google Blogger API 可以利用程式修改網誌文章內容. &lt;a href="http://mde.tw/cd2019"&gt;http://mde.tw/cd2019&lt;/a&gt;
    '''
    }
    update = posts.update(blogId="5276710004996457925", postId="1389587938059038064", body=body, publish=True)
    update_doc = update.execute()
    print(update_doc)
except(client.AccessTokenRefreshError):
    print("error")
    </pre>
<p></p>
<h2>實習項目三</h2>
<p>利用 Html5 建立 Github Pages 上的個人網站</p>
<p>1. The Essential Guide to HTML5 - Using Games to Learn HTML5 and JavaScript (2018)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-4155-4">https://link.springer.com/book/10.1007/978-1-4842-4155-4</a> </p>
<p>Source Code: <a href="https://github.com/Apress/essential-guide-html5">https://github.com/Apress/essential-guide-html5</a> </p>
<p>Example: <a href="/downloads/essential-guide-html5/Ch04/cannball1.html">/downloads/essential-guide-html5/Ch04/cannball1.html</a> </p>
<p>2. Pro HTML5 Games - Learn to Build your Own Games using HTML5 and JavaScript (2017)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-2910-1">https://link.springer.com/book/10.1007/978-1-4842-2910-1</a> </p>
<p>Source Code: <a href="https://github.com/apress/pro-html5-games-17">https://github.com/apress/pro-html5-games-17</a> </p>
<p>Example: <a href="/downloads/pro-html5-games-17/9781484229095/9781484229095_Ch05/index.html">/downloads/pro-html5-games-17/9781484229095/9781484229095_Ch05/index.html</a></p>
<p><img caption="false" height="464" src="/images/wcm_w6_1.png" width="600"/></p>
<h4>參考資料</h4>
<p>1. Introducing JavaScript Game Development - Build a 2D Game from the Ground Up (2017)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-3252-1">https://link.springer.com/book/10.1007/978-1-4842-3252-1</a> </p>
<p>2. JavaScript Creativity - Exploring the Modern Capabilities of JavaScript and HTML5 (2014)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-5945-9">https://link.springer.com/book/10.1007/978-1-4302-5945-9</a> </p>
<p>3. 利用 <a href="https://getbootstrap.com/">bootstrap</a> 建立網頁:</p>
<p><a href="/downloads/bootstrap_guide.pdf">bootstrap_guide.pdf</a></p>
<p><a href="/downloads/html_css_bootstrap_framework.pdf">html_css_bootstrap_framework.pdf</a></p>
<p><a href="/downloads/Bootstrap-Programming-Cookbook.pdf">Bootstrap-Programming-Cookbook.pdf</a> (<a href="/downloads/Bootstrap-Layout.zip">Bootstrap-Layout.zip</a>)</p><h3>game1</h3>
<h4>The game of craps has the following rules:</h4>
<p>課本章節: <a href="https://link.springer.com/chapter/10.1007/978-1-4842-4155-4_2">https://link.springer.com/chapter/10.1007/978-1-4842-4155-4_2</a> </p>
<p>The player throws a pair of dice. The sum of the two top faces is what matters so a 1<br/>and a 3 is the same as 2 and 2. The sum of two 6-sided dice can be any number from 2 to<br/>12. If the player throws a 7 or 11 on the first throw, the player wins. If the player throws a 2, 3, or 12, the player loses. For any other result (4, 5, 6, 8, 9, 10), this result is recorded as what is called the player’s point and a follow-up throw is required. On follow-up throws, a throw of 7 loses and a throw of the player’s point wins. For anything else, the game continues with the follow-up throw rules.</p>
<p><button onclick="myFunction()">Try it</button></p>
<p id="demo"></p>
<script>// <![CDATA[
function myFunction() {
  document.getElementById("demo").innerHTML = Math.floor(Math.random()*10);
}
// ]]></script>
<p>上述程式原始碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;p&gt;&lt;button onclick="myFunction()"&gt;Try it&lt;/button&gt;&lt;/p&gt;
&lt;p id="demo"&gt;&lt;/p&gt;
&lt;script&gt;// &lt;![CDATA[
function myFunction() {
  document.getElementById("demo").innerHTML = Math.floor(Math.random()*10);
}
// ]]&gt;&lt;/script&gt;</pre>
<script type="text/javascript">// <![CDATA[
var cwidth = 400;
	var cheight = 300;
	var dicex = 50;
	var dicey = 50;
	var dicewidth = 100;
	var diceheight = 100;
	var dotrad = 6;
	var ctx;
	var dx;
	var dy;
	var firstturn = true;
	var point;
function throwdice() {
	var sum;
	var ch = 1+Math.floor(Math.random()*6);
	sum = ch;
	dx = dicex;
	dy = dicey;
	drawface(ch);
	dx = dicex + 150;
	ch=1 + Math.floor(Math.random()*6);
	sum += ch;
	drawface(ch);
	if (firstturn) {
		switch(sum) {
			case 7:
			case 11:
			  document.f.outcome.value="You win!";
			  break;
			case 2:
			case 3:
			case 12:
			  document.f.outcome.value="You lose!";
			  break;
			default:
			  point = sum;
			  document.f.pv.value=point;
			  firstturn = false;
			  document.f.stage.value="Need follow-up throw.";
			  document.f.outcome.value="   ";
		}
	}
	else {
		switch(sum) {
		case point:
		   document.f.outcome.value="You win!";
		   document.f.stage.value="Back to first throw.";
		   document.f.pv.value=" ";
		   firstturn = true;
		   break;
		case 7:
		   document.f.outcome.value="You lose!";
		   document.f.stage.value="Back to first throw.";
		   document.f.pv.value=" ";
		   firstturn = true;
		}
		   	}
}
function drawface(n) {
  ctx = document.getElementById('canvas').getContext('2d');  
  ctx.lineWidth = 5;
  ctx.clearRect(dx,dy,dicewidth,diceheight);
  ctx.strokeRect(dx,dy,dicewidth,diceheight)
  var dotx;
  var doty;
  ctx.fillStyle = "#009966";
	switch(n) {
		case 1:
		 draw1();
		 break;
		case 2:
		 draw2();
		 break;
		case 3:
		 draw2();
		 draw1();
		 break;
		case 4:
		 draw4();
		 break;
		case 5:
		 draw4();
		 draw1();
		 break;
		case 6:
		 draw4();
		 draw2mid();
		 break;
		
	}
}
function draw1() {
	var dotx;
	var doty;
	ctx.beginPath();
	dotx = dx + .5*dicewidth;
	doty = dy + .5*diceheight;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();
}
function draw2() {
	var dotx;
	var doty;
	ctx.beginPath();
	dotx = dx + 3*dotrad;
	doty = dy + 3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	dotx = dx+dicewidth-3*dotrad;
	doty = dy+diceheight-3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();
}
function draw4() {
	var dotx;
	var doty;
	ctx.beginPath();
	dotx = dx + 3*dotrad;
	doty = dy + 3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	dotx = dx+dicewidth-3*dotrad;
	doty = dy+diceheight-3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();
	ctx.beginPath();
	dotx = dx + 3*dotrad;
	doty = dy + diceheight-3*dotrad;  //no change
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	dotx = dx+dicewidth-3*dotrad;
	doty = dy+ 3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();	
}
function draw2mid() {
	var dotx;
	var doty;
	ctx.beginPath();
	dotx = dx + 3*dotrad;
	doty = dy + .5*diceheight;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	dotx = dx+dicewidth-3*dotrad;
	doty = dy + .5*diceheight; //no change
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();
}
// ]]></script>
<p><canvas height="300" id="canvas" width="400"> Your browser doesn't support the HTML5 element canvas. </canvas> <br/> <button onclick="throwdice();">Throw dice </button></p>
<form id="f" name="f">Stage: <input name="stage" type="text" value="First Throw"/> Point: <input name="pv" type="text" value="   "/> Outcome: <input name="outcome" type="text" value="     "/></form>
<p>上述程式原始碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script type="text/javascript"&gt;// &lt;![CDATA[
var cwidth = 400;
	var cheight = 300;
	var dicex = 50;
	var dicey = 50;
	var dicewidth = 100;
	var diceheight = 100;
	var dotrad = 6;
	var ctx;
	var dx;
	var dy;
	var firstturn = true;
	var point;
function throwdice() {
	var sum;
	var ch = 1+Math.floor(Math.random()*6);
	sum = ch;
	dx = dicex;
	dy = dicey;
	drawface(ch);
	dx = dicex + 150;
	ch=1 + Math.floor(Math.random()*6);
	sum += ch;
	drawface(ch);
	if (firstturn) {
		switch(sum) {
			case 7:
			case 11:
			  document.f.outcome.value="You win!";
			  break;
			case 2:
			case 3:
			case 12:
			  document.f.outcome.value="You lose!";
			  break;
			default:
			  point = sum;
			  document.f.pv.value=point;
			  firstturn = false;
			  document.f.stage.value="Need follow-up throw.";
			  document.f.outcome.value="   ";
		}
	}
	else {
		switch(sum) {
		case point:
		   document.f.outcome.value="You win!";
		   document.f.stage.value="Back to first throw.";
		   document.f.pv.value=" ";
		   firstturn = true;
		   break;
		case 7:
		   document.f.outcome.value="You lose!";
		   document.f.stage.value="Back to first throw.";
		   document.f.pv.value=" ";
		   firstturn = true;
		}
		   	}
}
function drawface(n) {
  ctx = document.getElementById('canvas').getContext('2d');  
  ctx.lineWidth = 5;
  ctx.clearRect(dx,dy,dicewidth,diceheight);
  ctx.strokeRect(dx,dy,dicewidth,diceheight)
  var dotx;
  var doty;
  ctx.fillStyle = "#009966";
	switch(n) {
		case 1:
		 draw1();
		 break;
		case 2:
		 draw2();
		 break;
		case 3:
		 draw2();
		 draw1();
		 break;
		case 4:
		 draw4();
		 break;
		case 5:
		 draw4();
		 draw1();
		 break;
		case 6:
		 draw4();
		 draw2mid();
		 break;
		
	}
}
function draw1() {
	var dotx;
	var doty;
	ctx.beginPath();
	dotx = dx + .5*dicewidth;
	doty = dy + .5*diceheight;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();
}
function draw2() {
	var dotx;
	var doty;
	ctx.beginPath();
	dotx = dx + 3*dotrad;
	doty = dy + 3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	dotx = dx+dicewidth-3*dotrad;
	doty = dy+diceheight-3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();
}
function draw4() {
	var dotx;
	var doty;
	ctx.beginPath();
	dotx = dx + 3*dotrad;
	doty = dy + 3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	dotx = dx+dicewidth-3*dotrad;
	doty = dy+diceheight-3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();
	ctx.beginPath();
	dotx = dx + 3*dotrad;
	doty = dy + diceheight-3*dotrad;  //no change
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	dotx = dx+dicewidth-3*dotrad;
	doty = dy+ 3*dotrad;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();	
}
function draw2mid() {
	var dotx;
	var doty;
	ctx.beginPath();
	dotx = dx + 3*dotrad;
	doty = dy + .5*diceheight;
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	dotx = dx+dicewidth-3*dotrad;
	doty = dy + .5*diceheight; //no change
	ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
	ctx.closePath();
	ctx.fill();
}
// ]]&gt;&lt;/script&gt;
&lt;p&gt;&lt;canvas height="300" id="canvas" width="400"&gt; Your browser doesn't support the HTML5 element canvas. &lt;/canvas&gt; &lt;br&gt; &lt;button onclick="throwdice();"&gt;Throw dice &lt;/button&gt;&lt;/p&gt;
&lt;form id="f" name="f"&gt;Stage: &lt;input name="stage" type="text" value="First Throw"&gt; Point: &lt;input name="pv" type="text" value="   "&gt; Outcome: &lt;input name="outcome" type="text" value="     "&gt;&lt;/form&gt;</pre>
<p></p>
<h3>canvas1</h3>
<p><canvas height="300" id="canvas" width="400"> Your browser doesn't support the HTML5 element canvas. </canvas></p>
<script>// <![CDATA[
canvas = document.getElementById("canvas");
ctx = canvas.getContext('2d');

function draw(){
 ctx.beginPath();
 ctx.strokeStyle = "rgb(200,0,0)";
 ctx.arc(200, 200,50,0,2*Math.PI, false);
 ctx.closePath();
 ctx.stroke();
}

function clear_canvas(){
// Store the current transformation matrix
// The save() method pushes the current state onto the stack..
ctx.save();

// Use the identity matrix while clearing the canvas
// the setTransform() method lets you scale, rotate, move, and skew the current context.
// setTransform(Horizontal scaling, Horizontal skewing,Vertical skewing, Vertical scaling, Horizontal moving, Vertical moving)
ctx.setTransform(1, 0, 0, 1, 0, 0);
ctx.clearRect(0, 0, canvas.width, canvas.height);
// Restore the transform
// The restore() method pops the top state on the stack, restoring the context to that state.
ctx.restore();
}
// ]]></script>
<p><button onclick="draw()">繪圖</button> <button onclick="clear_canvas()">清除</button></p>
<p>上述以 Html5 Canvas 繪圖的程式碼:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;p&gt;&lt;canvas height="300" id="canvas" width="400"&gt; Your browser doesn't support the HTML5 element canvas. &lt;/canvas&gt;&lt;/p&gt;
&lt;script&gt;
canvas = document.getElementById("canvas");
ctx = canvas.getContext('2d');

function draw(){
 ctx.beginPath();
 ctx.strokeStyle = "rgb(200,0,0)";
 ctx.arc(200, 200,50,0,2*Math.PI, false);
 ctx.closePath();
 ctx.stroke();
}

function clear_canvas(){
// Store the current transformation matrix
// The save() method pushes the current state onto the stack..
ctx.save();

// Use the identity matrix while clearing the canvas
// the setTransform() method lets you scale, rotate, move, and skew the current context.
// setTransform(Horizontal scaling, Horizontal skewing,Vertical skewing, Vertical scaling, Horizontal moving, Vertical moving)
ctx.setTransform(1, 0, 0, 1, 0, 0);
ctx.clearRect(0, 0, canvas.width, canvas.height);
// Restore the transform
// The restore() method pops the top state on the stack, restoring the context to that state.
ctx.restore();
}
&lt;/script&gt;
&lt;p&gt;&lt;button onclick="draw()"&gt;繪圖&lt;/button&gt; &lt;button onclick="clear_canvas()"&gt;清除&lt;/button&gt;&lt;/p&gt;</pre>
<h3>Brython</h3>
<h4>Spur Gear1</h4>
<p>使用 <a href="https://brython.info/">Brython</a> 繪圖:</p>
<!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p></p>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
<p><canvas height="600" id="onegear" width="800"></canvas></p>
<!-- 以下製作 button-->
<div height="20" id="onegear_div" width="800"></div>
<p><input id="n" type="text" value="22"/><br/> <button id="button">Set Number of Gears</button></p>
<!-- 以下實際利用  Brython 繪圖-->
<script type="text/python3">
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx
 
    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
 
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd>rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd>rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd>rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
 
# 以 button 驅動的事件函式
def setgearnumber(e):
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    x = (canvas.width)/2
    y = (canvas.height)/2
    if doc["n"].value.isdigit():
        n1 = int(doc["n"].value)
    else:
        n1= 25
    # 設定齒輪參數
    x = (canvas.width)/2
    y = (canvas.height)/2
    r = 0.6*(canvas.height/2)
    pa = 20
    # 繪出齒輪
    Spur(ctx).Gear(x, y, r, n1, pa, "blue")
#判定 button
setgearnumber(True)
doc['button'].bind('click',setgearnumber)
</script>
<p>上述正齒輪繪圖程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 導入 Brython 標準程式庫 --&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;p&gt;&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;
&lt;p&gt;&lt;canvas height="600" id="onegear" width="800"&gt;&lt;/canvas&gt;&lt;/p&gt;
&lt;!-- 以下製作 button--&gt;
&lt;div height="20" id="onegear_div" width="800"&gt;&lt;/div&gt;
&lt;p&gt;&lt;input id="n" type="text" value="22"&gt;&lt;br&gt; &lt;button id="button"&gt;Set Number of Gears&lt;/button&gt;&lt;/p&gt;
&lt;!-- 以下實際利用  Brython 繪圖--&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx
 
    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
 
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
 
# 以 button 驅動的事件函式
def setgearnumber(e):
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    x = (canvas.width)/2
    y = (canvas.height)/2
    if doc["n"].value.isdigit():
        n1 = int(doc["n"].value)
    else:
        n1= 25
    # 設定齒輪參數
    x = (canvas.width)/2
    y = (canvas.height)/2
    r = 0.6*(canvas.height/2)
    pa = 20
    # 繪出齒輪
    Spur(ctx).Gear(x, y, r, n1, pa, "blue")
#判定 button
setgearnumber(True)
doc['button'].bind('click',setgearnumber)
&lt;/script&gt;</pre>
<p></p>
<!-- for Brython -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 brython() -->
<p>
<script>
window.onload=function(){
brython(1);
}
</script>
</p>
<!-- 以下利用 Brython 程式執行繪圖 -->
<p><canvas height="400" id="taiwan_flag" width="600"></canvas></p>
<p>
<script type="text/python3">
# 導入 doc
from browser import document as doc
import math
 
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
</p>
<p>上述國旗繪圖程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- for Brython --&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;!-- 啟動 brython() --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;
&lt;p&gt;&lt;canvas height="400" id="taiwan_flag" width="600"&gt;&lt;/canvas&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
# 導入 doc
from browser import document as doc
import math
 
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
&lt;/script&gt;</pre>
<p></p><h3>Cango Library</h3>
<p><a href="https://www.arc.id.au/GearDrawing.html">https://www.arc.id.au/GearDrawing.html</a></p>
<p><a href="/downloads/Approximation_of_involute_curves_for_CAD-system_pr.pdf">Approximation_of_involute_curves_for_CAD-system_pr.pdf</a></p>
<p></p>
<script src="/static/Cango-13v16-min.js" type="text/javascript"></script>
<script src="/static/CangoAxes-4v04-min.js" type="text/javascript"></script>
<script src="/static/gearUtils-05.js" type="text/javascript"></script>
<script type="text/javascript">
function distanceFromCurve(pt, bezNodes)
    {
      /* Calculates distance from point (pt) to the closest point on cubic Bezier curve (bez)
       * Algorithm suggested by Mike Kamermans http://pomax.github.io/bezierinfo/
       * Note: this is designed for well behaved Bezier curves only (no kinks)
       */
      var mu = 0.5,
          dMu = 1.0,
          dMuMin = 0.000001,
          testPt, testLft, testRgt;

      function pointOnBezier(p)
      {
        var x1 = bezNodes[0].x,
            y1 = bezNodes[0].y,
            x2 = bezNodes[1].x,
            y2 = bezNodes[1].y,
            x3 = bezNodes[2].x,
            y3 = bezNodes[2].y,
            x4 = bezNodes[3].x,
            y4 = bezNodes[3].y,
            f1 = function(t) { return (t*t*t); },
            f2 = function(t) { return (3*t*t*(1-t)); },
            f3 = function(t) { return (3*t*(1-t)*(1-t)); },
            f4 = function(t) { return ((1-t)*(1-t)*(1-t)); },
            /* p from 0 to 1 */
            bezX = function() { return x1*f1(p) + x2*f2(p) + x3*f3(p) + x4*f4(p); },
            bezY = function() { return y1*f1(p) + y2*f2(p) + y3*f3(p) + y4*f4(p); };

        return {x:bezX(), y:bezY()}
      }

      function calcDist(p, u)
      {
        var bezPt = pointOnBezier(u),
            distVal = Math.sqrt((bezPt.x-p.x)*(bezPt.x-p.x)+(bezPt.y-p.y)*(bezPt.y-p.y));

        return {distance: distVal, x: bezPt.x, y: bezPt.y};
      }

      do
      {
        testPt = calcDist(pt, mu);
        // half distance to left
        dMu /= 2;
        testLft = calcDist(pt, mu-dMu);
        testRgt = calcDist(pt, mu+dMu);
        if (testLft.distance<testPt.distance)
        {
          mu -= dMu;
          if (mu<0) { mu = 0; }
        }
        if (testRgt.distance<testPt.distance)
        {
          mu += dMu;
          if (mu>1) { mu = 1; }
        }
      }
      while (dMu>dMuMin)

      return testPt;   // object {distance:, x:, y: }
    }

    function updateErrors(tbl, rowNum, str0, str1, str2)
    {
/*
      var rowId = "t"+tbl+"row"+rowNum;
      var rowNode = document.getElementById(rowId);

      var tds = rowNode.getElementsByTagName("TD");   // array of TD elements
      tds[0].childNodes[0].nodeValue = str0;    // text node of TD element
      tds[1].childNodes[0].nodeValue = str1;
      tds[2].childNodes[0].nodeValue = str2;
*/
    }

    function InvoluteDefined(cvsID, module, teeth, pressureAngle)
    {
      'use strict';
      var savThis = this,
          m, Z, phi, Rpitch, Rb, addendum, Ra,
          toothData, toothObj,
          pitchToBaseAngle,
          gear, invData,
          invMax, invMin,
          xspan, yspan,
          pt, A,
          cx1, cy1,
          c1,
          g, xmin, xmax, ymin, ymax,
          i, theta, newTooth;

      function toCartesian(radius, angle)
      {
        return {x: radius*Math.cos(angle), y: radius*Math.sin(angle)};
      }

      function genInvolute2(Rb, theta)
      {
        // given the parameter theta, return the x, y of the involute
        var ix = Rb*(Math.cos(theta) + theta*Math.sin(theta));
        var iy = Rb*(Math.sin(theta) - theta*Math.cos(theta));

        return {x:ix, y:iy};
      }

      function dragC1(mousePos)    // called in scope of dragNdrop obj
      {
        var xp, yp,
            wPos = {x:mousePos.x - this.grabOfs.x, y:mousePos.y - this.grabOfs.y};
// generate a value of A (involute generating angle) near to the drag point
// origin is at invMin and invMax is the end, get current pos as proportion of inv span
        xp = (wPos.x<0)? 0: wPos.x/xspan;
        if (xp>1)
        {
          xp = 1;
        }
        yp = (wPos.y<0)? 0: wPos.y/yspan;
        if (yp>1)
        {
          yp = 1;
        }
        A = Math.sqrt(0.707*Math.sqrt(xp*xp + yp*yp));
        pt = genInvolute2(Rb, A);
        cx1 = pt.x - Rb;
        cy1 = pt.y;
        savThis.drawInv();
      }

      g = new Cango(cvsID);      // g is the graphics context for the background
      xmin = -54;
      xmax = 20;
      ymin = -5;
      ymax = 40;

      g.setWorldCoordsRHC(xmin, ymin, xmax-xmin);   // square pixels
      g.setPropertyDefault("fillColor", 'black');
      g.setPropertyDefault("fontSize", 12);
      // =============== DIN GEAR DESIGN ===================
      m = module;                // Module = teeth per inch of diamter
      Z = teeth;
      phi = pressureAngle || 20; // pressure angle in degs
      Rpitch = Z*m/2;                // pitch radius
      Rb = Rpitch*Math.cos(phi*Math.PI/180);  // base radius
      addendum = m;             // distance from pitch circle to outer circle
      Ra = Rpitch + addendum;       // addendum (outer) radius
      // generate gear tooth outline path
      toothData = createGearTooth(m, Z, phi);
      toothObj = new Path(toothData, {strokeColor:'red'});
      // make 5 teeth by duplicating
      gear = toothObj.dup();  // new Group(toothObj);
      for (i=1; i<4; i++)
      {
        newTooth = toothObj.dup();
        newTooth.rotate(360*i/Z);
        gear.appendPath(newTooth, true);
      }
      gear.rotate(-270/Z);
      // rotate the tooth to put start of involute on the x axis
      pitchToBaseAngle = (Math.sqrt(Rpitch*Rpitch - Rb*Rb)/Rb) - Math.acos(Rb/Rpitch);
      gear.rotate(180*pitchToBaseAngle/Math.PI);
      // now draw the extended involute
      invData = [];
      pt = {};
      for (theta=0; theta<1; theta+= 0.05)   // step along involute by inc parameter
      {
        pt = genInvolute2(Rb, theta);
        invData.push(pt.x, pt.y);
      }
      invMax = genInvolute2(Rb, 1);
      invData.push(invMax.x, invMax.y);   // plot the last point (theta = 1 radian)
      invMin = {x:Rb, y: 0} ;
      xspan = invMax.x-invMin.x;      // use these when dragging dot
      yspan = invMax.y-invMin.y;
      A = 0.8;                    // initial involute generating angle 0.8 rads
      cx1 = 59.7-Rb;
      cy1 = 7.5;  // eqiv x,y on involute for 0.8 theta
      // compile the involute control point and make it draggable
      c1 = new Shape(shapeDefs.circle(2), {fillColor:'red', iso:true});
      c1.enableDrag(null, dragC1, null);

      this.showConst = false;    // show construction lines

      this.drawInv = function()
      {
        var compA, gPt, genLines;

        g.clearCanvas();
        g.drawAxes(xmin, xmax, ymin, ymax, {xOrigin:-Rb, yOrigin:0, yTickInterval:50, strokeColor:"#888888", fillColor:"#888888"});  // don't show y ticks
        gear.transform.translate(-Rb, 0);
        g.render(gear);
        g.drawPath(shapeDefs.circle(Rb*2), {x:-Rb, y:0, strokeColor:'rgba(0,0,255,0.3)'});

        g.drawPath(invData, {x:-Rb, y:0, strokeColor:'magenta'});

        // draw generating right angle
        compA = Math.PI/2 - A;
        gPt = toCartesian(Rb, A);
        genLines = ['M', 0, 0, 'l', gPt.x, gPt.y, Rb*A*Math.cos(compA), -Rb*A*Math.sin(compA)];
        g.drawPath(genLines, {x:-Rb, y:0});
        // draw little right angle sign
        genLines = ['M', 0.95*gPt.x, 0.95*gPt.y, 'l', 0.05*Rb*Math.cos(compA), -0.05*Rb*Math.sin(compA),
                    0.05*Rb*Math.cos(A), 0.05*Rb*Math.sin(A)];
        g.drawPath(genLines, {x:-Rb, y:0});
        // draw draggable end point
        c1.transform.translate(cx1, cy1);
        g.render(c1);
        if (this.showConst)
        {
          genLines = ['M', 0, 0, 'L', gPt.x, gPt.y, gPt.x, 0, "Z", "M", gPt.x, gPt.y,
                      "l", Rb*A*Math.cos(compA), -Rb*A*Math.sin(compA), -Rb*A*Math.cos(compA), 0, "Z"];
          g.drawPath(genLines, {x:-Rb, y:0});
          // label if they fit
          g.drawText("R", {x:gPt.x/2-Rb-1.8, y:gPt.y/2+1.5, lorg:9});
          g.drawText("b", {x:gPt.x/2-Rb-1, y:gPt.y/2+1, fontSize:10, lorg:9});
          if (A>0.3)
          {
            g.drawArrowArc(7.5, 0, 180*A/Math.PI, {
              x:-Rb, y:0,
              fillColor:"#aaaaaa",
              clockWise:false,
              shaftWidth:1,
              headSize:7});
            g.drawText("\u03B8", {x:gPt.x/4-Rb, y:gPt.y/8, lorg:4});
            g.drawText("x'", {x:2*gPt.x/3-Rb, y:2, lorg:5});
            g.drawText("y'", {x:gPt.x-Rb-1, y:gPt.y/3, lorg:3});
            g.drawText("\u03B8", {x:gPt.x-Rb+Rb*A*Math.sin(A)/20, y:gPt.y-4, lorg:1});
            g.drawText("x", {x:gPt.x-Rb+Rb*A*Math.sin(A)/2, y:gPt.y-Rb*A*Math.cos(A)+1, lorg:9});
            g.drawText("y", {x:gPt.x-Rb+1, y:2*gPt.y/3, lorg:1});
            g.drawText("c", {x:gPt.x-Rb+Rb*A*Math.sin(A)/2+1, y:gPt.y-Rb*A*Math.cos(A)/2+1, lorg:7});
            g.drawText("c'", {x:-Rb+Rb*Math.cos(A/2)-1, y:Rb*Math.sin(A/2)-1, lorg:6});
          }
        }
      };

      this.drawInv();
    }

    function InvoluteDefined2(cvsID, module, teeth, pressureAngle)
    {
      'use strict';
      var m, Z, phi,
          Rpitch, Rb, addendum, Ra,
          toothData, toothObj,
          pitchToBaseAngle,
          gear, i, newTooth,
          invData, pt, theta,
          invMax, invMin,
          xspan, yspan,
          A, cx1, cy1,
          compA, gPt,
          genLines, ph,
          g, xmin, xmax, ymin, ymax;

      function toCartesian(radius, angle)
      {
        return {x: radius*Math.cos(angle), y: radius*Math.sin(angle)};
      }

      function genInvolute2(Rb, theta)
      {
        // given the parameter theta, return the x, y of the involute
        var ix = Rb*(Math.cos(theta) + theta*Math.sin(theta)),
            iy = Rb*(Math.sin(theta) - theta*Math.cos(theta));

        return {x:ix, y:iy};
      }

      xmin = -45;
      xmax = 20;
      ymin = -4;
      ymax = 40;
      g = new Cango(cvsID);     // g is the graphics context for the background
      g.setWorldCoordsRHC(xmin, ymin, xmax-xmin);  // square pixels
      g.setPropertyDefault("fillColor", 'black');
      g.setPropertyDefault("fontSize", 12);
      // =============== DIN GEAR DESIGN ===================
      m = module;                // Module = teeth per inch of diamter
      Z = teeth;
      phi = pressureAngle || 20; // pressure angle in degs
      Rpitch = Z*m/2;                // pitch radius
      Rb = Rpitch*Math.cos(phi*Math.PI/180);  // base radius
      addendum = m;             // distance from pitch circle to outer circle
      Ra = Rpitch + addendum;       // addendum (outer) radius
      // generate gear tooth outline path
      toothData = createGearTooth(m, Z, phi);
      toothObj = new Path(toothData, {strokeColor:'red'});
      // make 5 teeth by duplicating
      gear = toothObj.dup();
      for (i=1; i<3; i++)
      {
        newTooth = toothObj.dup();
        newTooth.rotate(360*i/Z);
        gear.appendPath(newTooth, true);
      }
      gear.rotate(-270/Z);
      // rotate the tooth to put start of involute on the x axis
      pitchToBaseAngle = (Math.sqrt(Rpitch*Rpitch - Rb*Rb)/Rb) - Math.acos(Rb/Rpitch);
      gear.rotate(180*pitchToBaseAngle/Math.PI);
      // now draw the extended involute
      invData = [];
      pt = {};
      for (theta=0; theta<1; theta+= 0.05)   // step along involute by inc parameter
      {
        pt = genInvolute2(Rb, theta);
        invData.push(pt.x, pt.y);
      }
      invMax = genInvolute2(Rb, 1);
      invData.push(invMax.x, invMax.y);   // plot the last point (theta = 1 radian)
      invMin = {x:Rb, y: 0} ;
      xspan = invMax.x-invMin.x;      // use these when dragging dot
      yspan = invMax.y-invMin.y;
      A = 0.8;                    // initial involute generating angle 0.8 rads
      cx1 = 59.7-Rb;
      cy1 = 7.5;  // eqiv x,y on involute for 0.8 theta

      g.clearCanvas();
      g.drawAxes(xmin, xmax, ymin, ymax, {
        xOrigin:-Rb, yOrigin:0,
        yTickInterval:50,
        strokeColor:"#888888",
        fillColor:"#888888"});  // don't show y ticks
      gear.transform.translate(-Rb, 0);
      g.render(gear);
      g.drawPath(shapeDefs.circle(Rb*2), {x:-Rb, y:0, strokeColor:'rgba(0,0,255,0.3)'});
      g.drawPath(invData, {x:-Rb, y:0, strokeColor:'magenta'});
      // draw generating right angle
      compA = Math.PI/2 - A;
      gPt = toCartesian(Rb, A);
      genLines = ['M', 0, 0, 'l', gPt.x, gPt.y, Rb*A*Math.cos(compA), -Rb*A*Math.sin(compA), 'z'];
      g.drawPath(genLines, {x:-Rb, y:0});

      g.drawArrowArc(9, 0, 180*A/Math.PI, {
        x:-Rb, y:0,
        fillColor:"#aaaaaa",
        clockwise:false,
        shaftWidth:1,
        headSize:7});
      ph = 0.13;
      g.drawArrowArc(20, 0, 180*ph/Math.PI, {
        x:-Rb, y:0,
        fillColor:"#aaaaaa",
        clockWise:false,
        shaftWidth:1,  
        headSize:7});
      // draw little right angle sign
      genLines = ['M', 0.95*gPt.x, 0.95*gPt.y, 'l', 0.05*Rb*Math.cos(compA), -0.05*Rb*Math.sin(compA),
                  0.05*Rb*Math.cos(A), 0.05*Rb*Math.sin(A)];
      g.drawPath(genLines, {x:-Rb, y:0});
      // label if they fit
      g.drawText("R", {x:gPt.x/2-Rb-1.8, y:gPt.y/2+1.5, lorg:9});
      g.drawText("b", {x:gPt.x/2-Rb-1, y:gPt.y/2+1, fontSize:10, lorg:9});
      g.drawText("R", {x:gPt.x-Rb, y:gPt.y/6, lorg:9});
      g.drawText("\u03B8", {x:3*gPt.x/8-Rb, y:gPt.y/8, lorg:4});
      g.drawText("\u03C8", {x:7*gPt.x/8-Rb, y:1.5, lorg:5});
      g.drawText("c", {x:gPt.x-Rb+Rb*A*Math.sin(A)/2+1, y:gPt.y-Rb*A*Math.cos(A)/2+1, lorg:7});
      g.drawText("c'", {x:-Rb+Rb*Math.cos(A/2)-1, y:Rb*Math.sin(A/2)-1, lorg:6});
    }

    function InvoluteProfile(g, module, teeth, pressureAngle)
    {
      'use strict';
      var m, Z, phi, Rpitch, Rb, addendum, Ra, ta, order,
          fs, fm, fe,
          dedBez, addBez, bez,
          xmin, xmax, ymin, ymax;

      function genInvolute2(Rb, theta)
      {
        // given the parameter theta, return the x, y of the involute
        var ix = Rb*(Math.cos(theta) + theta*Math.sin(theta)),
            iy = Rb*(Math.sin(theta) - theta*Math.cos(theta));

        return {x:ix, y:iy};
      }

      xmin = -3;
      xmax = 3;
      ymin = -0.5;
      ymax = 5.5;

      g.setWorldCoordsRHC(xmin, ymin, xmax-xmin);  // square pixels

      // =============== Demo Gear ===================
      m = module;                         // Module = pitch diameter (mm)/teeth
      Z = teeth;
      phi = pressureAngle || 20;          // pressure angle in degs
      Rpitch = Z*m/2;                     // pitch radius
      Rb = Rpitch*Math.cos(phi*Math.PI/180);  // base radius
      addendum = m;                       // pitch circle to outer circle
      Ra = Rpitch + addendum;             // addendum (outer) radius
      ta = Math.sqrt(Ra*Ra-Rb*Rb)/Rb;     // involute angle at addendum
      order = 4;

      this.drawCubicBezInvolute = function()
      {
        var data, p, theta, row, sa, s, err, pt;

        // generate 2 Cubic Bezier approximation
        fs = 0.01;  // start 1% off the base circle
        fm = 0.25;  // break 25% along involute
        fe = 1;     // end at 100%
        dedBez = involuteBezCoeffs(m, Z, phi, 3, fs, fm);
        addBez = involuteBezCoeffs(m, Z, phi, 3, fm, fe);

        g.clearCanvas();
        g.drawAxes(-5, 5, -5, 5, {
          xOrigin:0,
          yOrigin:0,
          xUnits:"mm",
          yUnits:"mm",
          xLabel:"X",
          yLabels:"Y" });
        g.drawPath(shapeDefs.circle(Rpitch*2), {x:-Rpitch, y:0, strokeColor:'orange'});
        g.drawPath(shapeDefs.circle(Rb*2), {x:-Rpitch, y:0, strokeColor:'red'});
        g.drawPath(shapeDefs.circle(Ra*2), {x:-Rpitch, y:0, strokeColor:'green'});

        // draw the approximation
        data = ["M", dedBez[0].x, dedBez[0].y,
                    "C", dedBez[1].x, dedBez[1].y, dedBez[2].x, dedBez[2].y, dedBez[3].x, dedBez[3].y,
                    "C", addBez[1].x, addBez[1].y, addBez[2].x, addBez[2].y, addBez[3].x, addBez[3].y];
        g.drawPath(data, {x:-Rpitch, y:0, strokeColor:'blue'});
        // plot the Bezier nodes as exes
        for (p=0; p<dedBez.length; p++)    // skip duplicate at start
        {
          g.drawPath(shapeDefs.ex(0.2), {x:dedBez[p].x-Rpitch, y:dedBez[p].y, strokeColor:'blue'});
        }
        // plot the Bezier nodes
        for (p=0; p<addBez.length; p++)    // skip duplicate at start
        {
          g.drawPath(shapeDefs.cross(0.2), {x:addBez[p].x-Rpitch, y:addBez[p].y, strokeColor:'green'});
        }
        // calculate the errors
        sa = (Ra*Ra - Rb*Rb)/(2*Rb);
        for (theta=0.08, row=0; theta<ta; theta+= 0.08, row++)   // step along involute
        {
          pt = genInvolute2(Rb, theta);
          // calculate the errors
          s = Rb*theta*theta/2;
          if ((s/sa) < 0.25)
          {
            err = distanceFromCurve(pt, dedBez);
          }
          else
          {
            err = distanceFromCurve(pt, addBez);
          }
          // write the error in table
          updateErrors(2, row, sprintf("%4.2f", s/sa), sprintf("%7.5f", err.distance), sprintf("%.1E", err.distance/(Z*m)));
        }
      };

      this.drawRealInvolute = function()
      {
        var theta, pt,
          data = [];

        // now draw the real involute
        for (theta=0; theta<ta; theta+= 0.01)   // step along involute
        {
          pt = genInvolute2(Rb, theta);
          data.push(pt.x, pt.y);
        }
        pt = genInvolute2(Rb, ta);     // add the end point
        data.push(pt.x, pt.y);
        g.drawPath(data, {x:-Rpitch, y:0, strokeColor:'magenta'});
      };

      this.drawCubicBezInvolute();
      this.drawRealInvolute();
    }

    function InvoluteOrderN(g, module, teeth, pressureAngle, bezOrder)
    {
      'use strict';
      var m, Z, phi, Rpitch, Rb, addendum, Ra, order,
          fs, fe,
          ta, ts,
          bez,
          xmin, xmax, ymin, ymax;

      function genInvolute2(Rb, theta)
      {
        // given the parameter theta, return the x, y of the involute
        var ix = Rb*(Math.cos(theta) + theta*Math.sin(theta)),
            iy = Rb*(Math.sin(theta) - theta*Math.cos(theta));

        return {x:ix, y:iy};
      }

     /* Computes deCasteljau p(t) for n-control points
      * @param cp - list of control points [][x,y]
      * @param r - amount points (init value : points.length-1)
      * @param i - start value (init value : 0)
      * @param t - portion on the graph (range between 0.0 and 1.0)
      * @return point{x:,y:} - point on graph at p(t)
      *
      * @see http://stackoverflow.com/a/6271870 for n-control points
      */
      function getBezierPoint(cp, r, i, t)
      {
        var p1, p2;

        if (r == 0)
        {
          return cp[i];
        }
        p1 = getBezierPoint(cp, r - 1, i, t);
        p2 = getBezierPoint(cp, r - 1, i + 1, t);

        return {x:(1 - t) * p1.x + t * p2.x, y:(1 - t) * p1.y + t * p2.y};
      }

      xmin = -3;
      xmax = 3;
      ymin = -0.5;
      ymax = 5.5;

      g.setWorldCoordsRHC(xmin, ymin, xmax-xmin);  // square pixels

      // =============== this Demo Gear has Rroot < Rbase ===================
      m = module;                         // Module = pitch diameter (mm)/teeth
      Z = teeth;
      phi = pressureAngle || 20;          // pressure angle in degs
      Rpitch = Z*m/2;                     // pitch radius
      Rb = Rpitch*Math.cos(phi*Math.PI/180);  // base radius
      addendum = m;                       // pitch circle to outer circle
      Ra = Rpitch + addendum;             // addendum (outer) radius
      order = bezOrder || 4;
      fs = 0.01;                          // start offset as fraction of length
      fe = 1;                             // fraction of length at end of approx
      ta = Math.sqrt(Ra*Ra-Rb*Rb)/Rb;     // involute angle at addendum, end of approx
      ts = Math.sqrt(fs)*ta;              // involute angle, theta, at start of approx
      // generate Bezier approximation
      bez = involuteBezCoeffs(m, Z, phi, order, fs, fe);

      this.drawBezInvolute = function()
      {
        var data = [],
            t, p, pt, theta, row,
            sa, s, err;

        g.clearCanvas();
        g.drawAxes(-5, 5, -5, 5, {
          xOrigin:0,
          yOrigin:0,
          xUnits:"mm",
          yUnits:"mm",
          xLabel:"X",
          yLabels:"Y"});
        g.drawPath(shapeDefs.circle(Rpitch*2), {x:-Rpitch, y:0, strokeColor:'orange'});
        g.drawPath(shapeDefs.circle(Rb*2), {x:-Rpitch, y:0, strokeColor:'red'});
        g.drawPath(shapeDefs.circle(Ra*2), {x:-Rpitch, y:0, strokeColor:'green'});

        // draw approximation Bezier
        for (theta=ts; theta<ta; theta+= 0.05) // fraction of theta_a
        {
          t =  (theta-ts)/(ta - ts);  // map t (0 <= t <= 1) from theta (ts <= theta <= ta)
          pt = getBezierPoint(bez, order, 0, t);
          data.push(pt.x, pt.y);
        }
        // add the end point
        data.push(bez[bez.length-1].x, bez[bez.length-1].y);
        g.drawPath(data, {x:-Rpitch, y:0, strokeColor:'green'});
        // plot the Bezier nodes
        for (p=0; p<bez.length; p++)
        {
          g.drawPath(shapeDefs.ex(0.2), {x:bez[p].x-Rpitch, y:bez[p].y, strokeColor:'green'});
        }

        // calculate the errors (need a higher order version of Simon Porritt's jsBezier code)
        if (order==3)
        {
          sa = (Ra*Ra - Rb*Rb)/(2*Rb);
          for (theta=0.08, row=0; theta<ta; theta+= 0.08, row++)   // step along involute
          {
            pt = genInvolute2(Rb, theta);
            // calculate the errors
            s = Rb*theta*theta/2;
            err = distanceFromCurve(pt, bez);
            // write the error in table
            updateErrors(1, row, sprintf("%4.2f", s/sa),
                                 sprintf("%6.4f", err.distance),
                                 sprintf("%.1E", err.distance/(Z*m)));
          }
        }
      };

      this.drawRealInvolute = function()
      {
        var theta, pt,
            data = [];

        // now draw the real involute
        for (theta=0; theta<ta; theta+= 0.01)   // step along involute by inc parameter
        {
          pt = genInvolute2(Rb, theta);
          data.push(pt.x, pt.y);
        }
        pt = genInvolute2(Rb, ta);     // add the end point
        data.push(pt.x, pt.y);
        g.drawPath(data, {x:-Rpitch, y:0, strokeColor:'magenta'});
      };

      this.drawBezInvolute();
      this.drawRealInvolute();
    }

    function initGear(opts)
    {
      // create the required contents of next state vector (the default for others are OK)
      this.nextState.x = opts.cx;
      this.nextState.y = opts.cy;
    }

    function GearAnimation(g, module, gearTeeth, pinionTeeth, pressureAngle)
    {
      // =============== DIN GEAR DESIGN ===================
      var m = module,               // Module = mm of pitch diameter per tooth
          Zp = pinionTeeth,
          Zg = gearTeeth,
          gr = Zg/Zp,               // gear ratio
          phi = pressureAngle || 20,
          Rg = Zg*m/2,              // gear Pitch Radius
          Rp = Zp*m/2,              // pinion Pitch Radius
          bklsh = 0.04*m,           // backlash (mm)
          dC = bklsh/(2*Math.tan(Math.PI*phi/180)), // centre shift to make backlash
          data, sectorData,
          gear, gearOutline,
          grSector, gearGrp,
          pinion, pinionOutline, 
          pnSector, pinionGrp, 
          Dsg, 
          Dsp, 
          shaft,
          org, cx, cy,
          xmin = -50,
          ymin = -30,
          xspan = 100,
          i,
          gearConfig, pinionConfig,
          twnr;

      g.setWorldCoordsRHC(xmin, ymin, xspan);

      // generate gear
      data = createGearTooth(m, Zg, phi);
      // create sector from gear center (0,0)
      sectorData = data.slice(1);  // trim off the "M" replace with "L" and add "M 0 0" segment
      sectorData = ["M", 0, 0, "L"].concat(sectorData);
      gear = new Shape(sectorData, {
        fillColor:"#ddd0dd",
        fillRule: "evenodd" });
      grSector = gear.dup();       // make a working copy
      for (i=1; i<Zg; i++)
      {
        grSector.rotate(360/Zg);
        gear.appendPath(grSector);  
      }
      gear.rotate(180/Zg);      // rotate gear 1/2 tooth to mesh
      // add axle hole
      Dsg = 0.6*Rg;             // diameter of gear shaft
      shaft = new Path(shapeDefs.circle(Dsg));
      gear.appendPath(shaft);   // inset shape, fillRule "evenodd" will not fill it
      // outline
      gearOutline = new Path(data, {strokeColor: "#606060"});
      grSector = gearOutline.dup();
      for (i=1; i<Zg; i++)
      {
        grSector.rotate(360/Zg);
        gearOutline.appendPath(grSector);  
      }
      gearOutline.rotate(180/Zg);     // rotate gear 1/2 tooth to mesh
      // add axle hole outline
      shaft = new Path(shapeDefs.circle(Dsg), {strokeColor: "#606060"});
      gearOutline.appendPath(shaft);  // inset shape, fillRule "evenodd" will not fill it

      gearGrp = new Group(gear, gearOutline);
 
      // generate pinion
      data = createGearTooth(m, Zp, phi);
      // create sector from gear center (0,0)
      sectorData = data.slice(1);  // trim off the "M" replace with "L" and add "M 0 0" segment
      sectorData = ["M", 0, 0, "L"].concat(sectorData);
      pinion = new Shape(sectorData, {
        fillColor:"#d0d0e8",
        fillRule: "evenodd" });
      pnSector = pinion.dup();
      for (i=1; i<Zp; i++)
      {
        pnSector.rotate(360/Zp);
        pinion.appendPath(pnSector); 
      }
      pinion.rotate(-(180/Math.PI)*0.5*bklsh/Rp);  // rotate gear to take up backlash
      // add axle hole
      Dsp = 0.6*Rp;             // diameter of pinion shaft
      shaft = new Path(shapeDefs.circle(Dsp));
      pinion.appendPath(shaft);   // inset shape, fillRule "evenodd" will not fill it
      // outline
      pinionOutline = new Path(data, {strokeColor: "#606060"});
      pnSector = pinionOutline.dup();
      for (i=1; i<Zg; i++)
      {
        pnSector.rotate(360/Zp);
        pinionOutline.appendPath(pnSector);  
      }
      pinionOutline.rotate(-(180/Math.PI)*0.5*bklsh/Rp);     // rotate gear 1/2 tooth to mesh
      // add axle hole outline
      shaft = new Path(shapeDefs.circle(Dsp), {strokeColor: "#606060"});
      pinionOutline.appendPath(shaft);   // inset shape, fillRule "evenodd" will not fill it

      pinionGrp = new Group(pinion, pinionOutline);

      // setup the animation
      gearConfig = {cx:-Rg, cy:0, degs:[0, 360]};
      pinionConfig = {cx:Rp+dC, cy:0, degs:[0, -gr*360]};  // gr*0.666 rpm
			twnr = new Tweener(0, 90000, "loop");                // 0.666 rpm

      function initGear(opts)
      {
        // create the required contents of next state vector (the default for others are OK)
        this.nextState.x = opts.cx;
        this.nextState.y = opts.cy;
        gearGrp.transform.translate(this.nextState.x, this.nextState.y);
      }

      function drawGear(opts)
      {
        g.render(gearGrp);
      }

      function gearPath(time, opts)
      {
        var rotVal = twnr.getVal(time, opts.degs);
        // create the required contents of next state vector (the default for others are OK)
        this.nextState.degs = rotVal;
        gearGrp.transform.rotate(this.nextState.degs);
        gearGrp.transform.translate(this.nextState.x, this.nextState.y);
      }

      function initPinion(opts)
      {
        // create the required contents of next state vector (the default for others are OK)
        this.nextState.x = opts.cx;
        this.nextState.y = opts.cy;
        pinionGrp.transform.translate(this.nextState.x, this.nextState.y);
      }

      function drawPinion(opts)
      {
        g.render(pinionGrp);
      }

      function pinionPath(time, opts)
      {
        var rotVal = twnr.getVal(time, opts.degs);
        // create the required contents of next state vector (the default for others are OK)
        this.nextState.degs = rotVal;
        pinionGrp.transform.rotate(this.nextState.degs);
        pinionGrp.transform.translate(this.nextState.x, this.nextState.y);
      }

      g.animation(initGear, drawGear, gearPath, gearConfig);
      g.animation(initPinion, drawPinion, pinionPath, pinionConfig);

      this.run = function()
      {
        g.playAnimation();
      };

      this.halt = function()
      {
        g.pauseAnimation();
      };

      g.playAnimation();
    }

    function IntGearAnimation(g, module, gearTeeth, pinionTeeth, pressureAngle)
    {
      'use strict';
      // ==================== DIN GEAR DESIGN ====================
      var m = module,           // Module = teeth per inch of diamter
          Zp = pinionTeeth,
          Zg = gearTeeth,
          gr = Zg/Zp,           // gear teeth
          phi = pressureAngle || 20,
          Rg = Zg*m/2,          // gear Pitch radius
          Rp = Zp*m/2,          // pinion Pitch radius
          Rrim = Rg+2.75*m,     // ring gear outer radius
          bklsh = 0.04*m,       // backlash
          dC = bklsh/(2*Math.tan(Math.PI*phi/180)), // centre shift to make backlash
          data, sectorData,
          rim, rimOutline,
          gear, gearOutline,
          grSector, gearGrp,
          pinion, pinionOutline, 
          pnSector, pinionGrp, 
          Dsg, 
          Dsp, 
          Rshaft, shaft,
          org, cx, cy,
          xmin = -250,
          ymin = -125,
          xspan = 400,
          i,
          gearConfig, pinionConfig,
          twnr;

      g.setWorldCoordsRHC(xmin, ymin, xspan);

      // create ring gear outer rim
      rim = new Shape(shapeDefs.circle(2*Rrim), {
        fillColor:"#ddddd0",
        fillRule: "evenodd" });
      // now generate ring gear teeth
      data = createIntGearTooth(m, Zg, phi);
      // create sector from gear center (0,0)
      sectorData = data.slice(1);  // trim off the "M" replace with "L" and add "M 0 0" segment
      sectorData = ["M", 0, 0, "L"].concat(sectorData);
      gear = new Shape(sectorData);     // start as just one tooth outline
      grSector = gear.dup();        // make a working copy
      for (i=1; i<Zg; i++)
      {
        grSector.rotate(360/Zg);
        gear.appendPath(grSector); 
      }
      gear.rotate(180/Zg);  // rotate gear 1/2 tooth to mesh
      // add gear teeth to rim
      rim.appendPath(gear);   // inset shape, fillRule "evenodd" will not fill it
      // outline
      rimOutline = new Path(shapeDefs.circle(2*Rrim), {
        strokeColor: "#606060" });
      // now generate ring gear teeth
      data = createIntGearTooth(m, Zg, phi);
      // create sector from gear center (0,0)
      gearOutline = new Shape(data);     // start as just one tooth outline
      grSector = gearOutline.dup();        // make a working copy
      for (i=1; i<Zg; i++)
      {
        grSector.rotate(360/Zg);
        gearOutline.appendPath(grSector);
      }
      gearOutline.rotate(180/Zg);  // rotate gear 1/2 tooth to mesh
      rimOutline.appendPath(gearOutline); 

      gearGrp = new Group(rim, rimOutline);

      // generate pinion
      data = createGearTooth(m, Zp, phi);
      // create sector from gear center (0,0)
      sectorData = data.slice(1);  // trim off the "M" replace with "L" and add "M 0 0" segment
      sectorData = ["M", 0, 0, "L"].concat(sectorData);
      pinion = new Shape(sectorData, {
        fillColor:"#d0d0e8",
        fillRule: "evenodd" });
      pnSector = pinion.dup();
      for (i=1; i<Zp; i++)
      {
        pnSector.rotate(360/Zp);
        pinion.appendPath(pnSector); 
      }
      pinion.rotate((180/Math.PI)*0.5*bklsh/Rp);  // rotate gear close backlash
      // add axle shaft hole
      Rshaft = 0.3*Rp;      // shaft radius
      shaft = new Path(shapeDefs.circle(2*Rshaft));
      pinion.appendPath(shaft); // retain the moveTo to make sub-path
      // outline
      pinionOutline = new Path(data, {strokeColor: "#606060"});
      pnSector = pinionOutline.dup();
      for (i=1; i<Zg; i++)
      {
        pnSector.rotate(360/Zp);
        pinionOutline.appendPath(pnSector);  
      }
      pinionOutline.rotate((180/Math.PI)*0.5*bklsh/Rp);     // rotate gear 1/2 tooth to mesh
      // add axle hole outline
      shaft = new Path(shapeDefs.circle(2*Rshaft), {strokeColor: "#606060"});
      pinionOutline.appendPath(shaft); 

      pinionGrp = new Group(pinion, pinionOutline);

      // setup the animation
      gearConfig = {cx:-Rg, cy:0, degs:[0, 360]};
      pinionConfig = {cx:-Rp-dC, cy:0, degs:[0, gr*360]};   // gr*1 rpm
			twnr = new Tweener(0, 60000, "loop");                 // 1 rpm

      function initGear(opts)
      {
        // create the required contents of next state vector (the default for others are OK)
        this.nextState.x = opts.cx;
        this.nextState.y = opts.cy;
        gearGrp.transform.translate(this.nextState.x, this.nextState.y);
      }

      function drawGear(opts)
      {
        g.render(gearGrp);
      }

      function gearPath(time, opts)
      {
        var rotVal = twnr.getVal(time, opts.degs);
        // create the required contents of next state vector (the default for others are OK)
        this.nextState.degs = rotVal;
        gearGrp.transform.rotate(this.nextState.degs);
        gearGrp.transform.translate(this.nextState.x, this.nextState.y);
      }

      function initPinion(opts)
      {
        // create the required contents of next state vector (the default for others are OK)
        this.nextState.x = opts.cx;
        this.nextState.y = opts.cy;
        pinionGrp.transform.translate(this.nextState.x, this.nextState.y);
      }

      function drawPinion(opts)
      {
        g.render(pinionGrp);
      }

      function pinionPath(time, opts)
      {
        var rotVal = twnr.getVal(time, opts.degs);
        // create the required contents of next state vector (the default for others are OK)
        this.nextState.degs = rotVal;
        pinionGrp.transform.rotate(this.nextState.degs);
        pinionGrp.transform.translate(this.nextState.x, this.nextState.y);
      }

      g.animation(initGear, drawGear, gearPath, gearConfig);
      g.animation(initPinion, drawPinion, pinionPath, pinionConfig);

      this.run = function()
      {
        g.playAnimation();
      };

      this.halt = function()
      {
        g.pauseAnimation();
      };

      g.playAnimation();
    }

//============================================================
    var invDiagram, involuteDemo1, involuteDemo2, gearDemo, intGearDemo;

    function init()
    {
      var g1, g2, g3, g4;

      invDiagram = new InvoluteDefined('cvs0', 5, 20, 20);
      InvoluteDefined2('cvsA', 10, 8, 20);

      g1 = new Cango('cvs1');
      involuteDemo1 = new InvoluteOrderN(g1, 3, 17, 25, 3);
      initZoomPan(g1.createLayer(), g1, function(){involuteDemo1.drawBezInvolute(); involuteDemo1.drawRealInvolute();});

      g2 = new Cango('cvs2');
      involuteDemo2 = new InvoluteProfile(g2, 3, 17, 25);
      initZoomPan(g2.createLayer(), g2, function(){involuteDemo2.drawCubicBezInvolute(); involuteDemo2.drawRealInvolute();});

      g3 = new Cango('cvs3');
      gearDemo = new GearAnimation(g3, 5, 52, 24);
      initZoomPan(g3.createLayer(), g3, function(){g3.redrawAnimation;});

      g4 = new Cango('cvs4');
      intGearDemo = new IntGearAnimation(g4, 5, 42, 22, 20);
      initZoomPan(g4.createLayer(), g4, function(){g4.redrawAnimation;});
    }

    function showConstruction()
    {
      invDiagram.showConst = !invDiagram.showConst;
      invDiagram.drawInv();
      return false;
    }

    var consoleBtns3 =
    {
      f1:function(){gearDemo.run()},
      f2:function(){gearDemo.halt()}
    };

    var consoleBtns4 =
    {
      f1:function(){intGearDemo.run()},
      f2:function(){intGearDemo.halt()}
    };

    window.addEventListener("load", function(){
      init();
    });
</script>
<div style="position: relative; width: 500px; margin: 20px auto;"><canvas height="300" id="cvs0" width="475"></canvas>
<div class="captionHolder">
<p><b>Figure 1.</b> Schematic diagram of gear showing involute profile (magenta) and its base circle (blue). Drag the red dot to demonstrate the involute generation geometry.</p>
</div>
<!-- captionHolder --></div>
<div style="position: relative; width: 500px; margin: 20px auto;"><canvas height="250" id="cvsA" width="450"></canvas>
<div class="captionHolder">
<p><b>Figure 2.</b> Schematic diagram of involute gear tooth showing the polar coordinates of the involute profile (magenta) and its base circle (blue).</p>
</div>
<!-- captionHolder --></div>
<div class="canvasHolder" style="width: 600px; height: 400px;"><canvas height="400" id="cvs1" width="600"></canvas></div>
<div class="captionHolder" style="width: 600px;">
<p><b>Figure 3.</b> Cubic Bézier approximation to a circular involute (green line) calculated using the Higuchi-Chebyshev approximation method. The true involute is shown for comparison (magenta line).</p>
</div>
<div class="canvasHolder" style="width: 600px; height: 400px;"><canvas height="400" id="cvs2" width="600"></canvas></div>
<div class="captionHolder" style="width: 600px;">
<p><b>Figure 4.</b> A two cubic Bézier approximation to the same circular involute shown in Fig. 3 (blue line). The true involute, is shown in magenta for comparison.</p>
</div>
<div class="consoleHolder">
<div class="consoleBezel">
<div class="screenHolder" style="background-color: white;"><canvas height="400" id="cvs3" width="600"></canvas></div>
<div class="buttonHolder" style="margin-left: 70%; grid-template-columns: 1fr 1fr;"><button class="buttonLink" onclick="consoleBtns3.f1()" type="button">PLAY</button> <button class="buttonLink" onclick="consoleBtns3.f2()" type="button">PAUSE</button></div>
</div>
<!-- consoleBezel --></div>
<!-- consoleHolder -->
<div class="consoleHolder">
<div class="consoleBezel">
<div class="screenHolder" style="background-color: white;"><canvas height="400" id="cvs4" width="600"></canvas></div>
<!-- screenHolder -->
<div class="buttonHolder" style="margin-left: 70%; grid-template-columns: 1fr 1fr;"><button class="buttonLink" onclick="consoleBtns4.f1()" type="button">PLAY</button> <button class="buttonLink" onclick="consoleBtns4.f2()" type="button">PAUSE</button></div>
</div>
<!-- consoleBezel --></div>
<!-- consoleHolder -->
<h3>Ball</h3>
<p><a href="https://github.com/Rafidhasan/moving-ball">https://github.com/Rafidhasan/moving-ball</a> </p>
<script>
class Ball {
	constructor(radius, color) {
		this.radius = radius;
		this.color = color;
		this.isMoving = true;
		this.x = 0;
		this.y = 0;
		this.vx = 0;
		this.vy = 0;
		this.mass = 1;
		this.drag = 0.995;
		this.bounceFactor = 0.8;
		this.init();
	}
	init() {
		
		/*graphics.beginFill(color);
		graphics.drawCircle(0, 0, radius);
		graphics.endFill();*/
	}
	draw(ctx) {
		ctx.beginPath();
		ctx.strokeStyle = this.color;
		ctx.fillStyle = this.color;
		ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
		ctx.stroke();
		ctx.fill();
		ctx.closePath();
	}
} // ends class

var fpsCounter = function() {
	var fps = 60,
		framesThisSecond = 0,
		lastFpsUpdate = 0,
		fpsDecay = 0.25,
		fpsUpdateTime = 1000;
	var fpsDisplay = document.createElement('div');
	fpsDisplay.style.cssText = 'position:fixed;left:0;top:0;opacity:0.7;z-index:9999;font-family:sans-serif;font-size:16px;font-weight:bold;color:#00F;';
	fpsDisplay.appendChild(document.createTextNode(" FPS"));
	document.body.appendChild(fpsDisplay);
	this.update = function(timestamp) {
		if (typeof timestamp === 'undefined') { timestamp = performance.now() }; //if no timestamp is given, default to performance.now()
		if (timestamp > lastFpsUpdate + fpsUpdateTime) { //update every fpsUpdateTime
			fps = fpsDecay * framesThisSecond + (1 - fpsDecay) * fps; //compute the new FPS
			lastFpsUpdate = timestamp;
			framesThisSecond = 0;
			fpsDisplay.textContent = Math.round(fps) + " FPS";
		}
		framesThisSecond++;
	}
}

const maxFPS = 60;
const timestep = 1000/maxFPS;
const allowedTimeStepVariance = 1;
let lastUpdateTime = 0;
let delta = 1;
let running = false,
    started = false,
    currentRAF = 0;

var canvas, ctx;
var canvasWidth, canvasHeight;
var boundaryLeft, boundaryRight, boundaryTop, boundaryBottom;

let gravity = 0.001;
let balls = [];
let mouseTouchObj = {
	oldX : 0,
	oldY : 0,
	x : 0,
	y : 0,
	heldObj : null,
	
}
let heldObj;

document.addEventListener('DOMContentLoaded', function() {
	//initialize stage and tools
	canvas = document.querySelector("#myCanvas");
	ctx = canvas.getContext("2d");
	canvasWidth = canvas.width;
	canvasHeight = canvas.height;
	boundaryLeft = 0;
	boundaryRight = canvas.width;
	boundaryTop = 0;
	boundaryBottom = canvas.height;
	
	myFPSCounter = new fpsCounter(); //fps-counter.js
	
	canvas.addEventListener("mousemove", function (e) {
		var mousePos = getInputPosition(e.target, e);
		var message = 'Mouse position: ' + mousePos.x + ',' + mousePos.y;
		var msgTarget = document.querySelector("#desc-one");
		msgTarget.innerHTML = message;
		mouseTouchInput('move', e)
	}, false);
	canvas.addEventListener("mousedown", function (e) {
		mouseTouchInput('down', e)
	}, false);
	window.addEventListener("mouseup", function (e) {
		mouseTouchInput('up', e)
	}, false);
	canvas.addEventListener("mouseout", function (e) {
		mouseTouchInput('out', e)
	}, false);
	canvas.addEventListener("touchstart", function (e) {
		mouseTouchInput('down', e)
	}, false);
	canvas.addEventListener("touchmove", function (e) {
        e.preventDefault();
		mouseTouchInput('move', e)
	}, false);
	window.addEventListener("touchend", function (e) {
        e.preventDefault();
		mouseTouchInput('up', e)
	}, false);
	window.addEventListener("touchcancel", function (e) {
        e.preventDefault();
		mouseTouchInput('up', e)
	}, false);
	
	init();
});

function init() {
	//initialize stage objects
	balls.push(new Ball(20, "#FF0000"));
	balls[0].x = 250;
	balls[0].y = 100;
	balls[0].vx = 0;
	balls[0].vy = 0;
	//updateObjects(timestep);
	//drawObjects(ctx, balls);
	start();
}

function start() {
	if (!started) {
        started = true;
        currentRAF = requestAnimationFrame(function(timestamp) {
            //updateObjects();
            running = true;
            //lastUpdateTime = timestamp;
            //lastFpsUpdate = timestamp;
            //framesThisSecond = 0;
            currentRAF = requestAnimationFrame(mainLoop);
        });
    }
}
function stop() {
    running = false;
    started = false;
    cancelAnimationFrame(currentRAF);	
}
function panic() {
    delta = 0;
}
function mainLoop(timestamp) {
    currentRAF = requestAnimationFrame(mainLoop);
	//fixed delta/timestep, multiple updates per frame===============================================================================
	//console.log (timestamp, lastUpdateTime + (1000 / maxFPS), timestamp < lastUpdateTime + (1000 / maxFPS), (timestamp < lastUpdateTime + (1000 / maxFPS) - allowedTimeStepVariance))
	if (timestamp < lastUpdateTime + (1000 / maxFPS) - allowedTimeStepVariance) { // Throttle the frame rate
		//If the timestamp is only a little more than the next ideal frame, we would have to wait another cycle for the next update.
		//I find that introducing 'allowedTimeStepVariance' will give some allowance and reduce frame skips.
		//This should reduce the need to update multiple times per frame and give us smoother animations.
		//After implementing this, it is easier to reach the desired FPS limit.
        return; //stop here and wait for the next cycle
    }
	myFPSCounter.update(timestamp); //fps-counter.js
	delta += timestamp - lastUpdateTime;
    lastUpdateTime = timestamp;
    var numUpdateSteps = 0;
    while (delta >= timestep) { //run update multiple times per update, to prevent sudden jumps over obstables
        updateObjects(timestep); //with the multiple updates per frame method, we use a fixed delta(timestep)
        delta -= timestep;
        if (++numUpdateSteps >= 240) { //too many updates in a frame
            panic();
            break;
        }
    }
	drawObjects(ctx, balls); //draw only when updates have caught up
	//fixed delta/timestep, multiple updates per frame===============================================================================
	
	/*
	//dynamic delta/timestep, single updates per frame===============================================================================
	delta = timestamp - lastUpdateTime;
	//console.log("delta", delta)
    if (delta > timestep) { // Throttle the frame rate
		myFPSCounter.update(timestamp); //fps-counter.js
        updateObjects(delta);
		drawObjects(ctx, balls);
        lastUpdateTime = timestamp - (delta % timestep); //adjust lastUpdateTime time
    }
	//dynamic delta/timestep, single updates per frame===============================================================================
	*/
}
function updateObjects(updateDelta) {
	moveObjects(updateDelta, balls);
}
function moveObjects(updateDelta, objArr) {
	for (i = 0; i < objArr.length; i++) {
		if (objArr[i].isMoving) {
			objArr[i].vy += gravity * updateDelta; //do we apply delta to gravity? or acceleration in general?
			objArr[i].vx *= objArr[i].drag;
			objArr[i].vy *= objArr[i].drag;
			objArr[i].x += objArr[i].vx * updateDelta;
			objArr[i].y += objArr[i].vy * updateDelta;
			
			if (objArr[i].x + objArr[i].radius > boundaryRight) {
				objArr[i].x = boundaryRight - objArr[i].radius;
				objArr[i].vx = -objArr[i].vx * objArr[i].bounceFactor;
			} else if (objArr[i].x - objArr[i].radius < boundaryLeft) {
				objArr[i].x = boundaryLeft + objArr[i].radius;
				objArr[i].vx = -objArr[i].vx * objArr[i].bounceFactor;
			}
			if (objArr[i].y + objArr[i].radius > boundaryBottom) {
				objArr[i].y = boundaryBottom - objArr[i].radius;
				objArr[i].vy = -objArr[i].vy * objArr[i].bounceFactor;
			} else if (objArr[i].y - objArr[i].radius < boundaryTop) {
				objArr[i].y = boundaryTop + objArr[i].radius;
				objArr[i].vy = -objArr[i].vy * objArr[i].bounceFactor;
			}
		}
	}
	if (mouseTouchObj.heldObj) {
		mouseTouchObj.heldObj.vx = (mouseTouchObj.heldObj.x - mouseTouchObj.oldX) / updateDelta;
		mouseTouchObj.heldObj.vy = (mouseTouchObj.heldObj.y - mouseTouchObj.oldY) / updateDelta;
		mouseTouchObj.oldX = mouseTouchObj.heldObj.x;
		mouseTouchObj.oldY = mouseTouchObj.heldObj.y;
	}
}
function clearObjects(ctx, objArr) {
	ctx.clearRect(0, 0, canvasWidth, canvasHeight); //clear everything
	//or clear objects only, useful when performance is an issue
}
function drawObjects(ctx, objArr) {
	clearObjects(ctx, objArr);
	for (i = 0; i < objArr.length; i++) {
		objArr[i].draw(ctx);
	}	
}

function mouseTouchInput(type, e) {
	var inputPos = getInputPosition(canvas, e);
	if (type == 'down') {
		//simple hit detection for this test
		for (i = 0; i < balls.length; i++) {
			if ((inputPos.x >= balls[i].x - balls[i].radius && inputPos.x <= balls[i].x + balls[i].radius) && (inputPos.y >= balls[i].y - balls[i].radius && inputPos.y <= balls[i].y + balls[i].radius)) {
				balls[i].isMoving = false;
				mouseTouchObj.heldObj = balls[i];
				mouseTouchObj.oldX = mouseTouchObj.heldObj.x;
				mouseTouchObj.oldY = mouseTouchObj.heldObj.y;
			}
		}
	}
	if (type == 'up' || type == "out") {
		if (mouseTouchObj.heldObj) {
			mouseTouchObj.heldObj.isMoving = true;
			mouseTouchObj.heldObj = null;
		}
	}
	if (type == 'move') {
		if (mouseTouchObj.heldObj) {
			mouseTouchObj.heldObj.x = inputPos.x;
			mouseTouchObj.heldObj.y = inputPos.y;
		}
	}
}

function getInputPosition(targetCanvas, e) {
	var rect = targetCanvas.getBoundingClientRect();
    var position = {x: null, y: null};
    //if (Modernizr.touch) { //global variable detecting touch support
	if (e.touches && e.touches.length > 0) {
		position.x = e.touches[0].clientX - rect.left;
		position.y = e.touches[0].clientY - rect.top;
	} else {
		position.x = e.clientX - rect.left;
		position.y = e.clientY - rect.top;
	}
    return position;
}
//============================================Compatibility===================================================
var requestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : (function() {
	var lastTimestamp = Date.now(),
		now,
		timeout;
	return function(callback) {
		now = Date.now();
		timeout = Math.max(0, timestep - (now - lastTimestamp));
		lastTimestamp = now + timeout;
		return setTimeout(function() {
			callback(now + timeout);
		}, timeout);
	};
})(),

cancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : clearTimeout;
//============================================Compatibility===================================================

document.addEventListener('DOMContentLoaded', function() { 
				document.querySelector("#stop-btn").addEventListener("click", function (e) {
					stop();
				});
			});
</script>
<div id="centered">
<div id="main">
<div id="board-holder">
<div id="board" tabindex="0"><canvas height="300" id="myCanvas" width="500"></canvas></div>
</div>
<div><button id="stop-btn">stop</button></div>
<div>
<p class="desc" id="desc-one">test 1</p>
<p class="desc" id="desc-two">test 2</p>
</div>
</div>
</div><h3>two.js</h3>
<p><a href="https://github.com/jonobr1/two.js">https://github.com/jonobr1/two.js</a></p>
<p>類似程式庫</p>
<p><a href="https://konvajs.org/">https://konvajs.org/</a> </p>
<script src="/static/two.min.js"></script>
<hr/>
<p>draw-shape</p>
<div id="draw-shapes"></div>
<div>上述繪圖程式碼:</div>
<div>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;div id="draw-shapes"&gt;&lt;/div&gt;
&lt;script&gt;
// Make an instance of two and place it on the page.
var elem = document.getElementById('draw-shapes');
var params = { width: 285, height: 200 };
var two = new Two(params).appendTo(elem);

// two has convenience methods to create shapes.
var circle = two.makeCircle(72, 100, 50);
var rect = two.makeRectangle(213, 100, 100, 100);

// The object returned has many stylable properties:
circle.fill = '#FF8000';
circle.stroke = 'orangered'; // Accepts all valid css color
circle.linewidth = 5;

rect.fill = 'rgb(0, 200, 255)';
rect.opacity = 0.75;
rect.noStroke();

// Don't forget to tell two to render everything
// to the screen
two.update();
&lt;/script&gt;</pre>
</div>
<script>
// Make an instance of two and place it on the page.
var elem = document.getElementById('draw-shapes');
var params = { width: 285, height: 200 };
var two = new Two(params).appendTo(elem);

// two has convenience methods to create shapes.
var circle = two.makeCircle(72, 100, 50);
var rect = two.makeRectangle(213, 100, 100, 100);

// The object returned has many stylable properties:
circle.fill = '#FF8000';
circle.stroke = 'orangered'; // Accepts all valid css color
circle.linewidth = 5;

rect.fill = 'rgb(0, 200, 255)';
rect.opacity = 0.75;
rect.noStroke();

// Don't forget to tell two to render everything
// to the screen
two.update();
</script>
<hr/>
<p>draw-group</p>
<div id="draw-group">上述繪圖程式碼:</div>
<div>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;div id="draw-group"&gt;&lt;/div&gt;
&lt;script&gt;
var elem = document.getElementById('draw-group');
var two = new Two({ width: 285, height: 200 }).appendTo(elem);

var circle = two.makeCircle(-70, 0, 50);
var rect = two.makeRectangle(70, 0, 100, 100);
circle.fill = '#FF8000';
circle.stroke = 'orangered';
rect.fill = 'rgba(0, 200, 255, 0.75)';
rect.stroke = '#1C75BC';

// Groups can take an array of shapes and/or groups.
var group = two.makeGroup(circle, rect);

// And have translation, rotation, scale like all shapes.
group.translation.set(two.width / 2, two.height / 2);
group.rotation = Math.PI;
group.scale = 0.75;

// You can also set the same properties a shape have.
group.linewidth = 7;

two.update();
&lt;/script&gt;</pre>
</div>
<script>
var elem = document.getElementById('draw-group');
var two = new Two({ width: 285, height: 200 }).appendTo(elem);

var circle = two.makeCircle(-70, 0, 50);
var rect = two.makeRectangle(70, 0, 100, 100);
circle.fill = '#FF8000';
circle.stroke = 'orangered';
rect.fill = 'rgba(0, 200, 255, 0.75)';
rect.stroke = '#1C75BC';

// Groups can take an array of shapes and/or groups.
var group = two.makeGroup(circle, rect);

// And have translation, rotation, scale like all shapes.
group.translation.set(two.width / 2, two.height / 2);
group.rotation = Math.PI;
group.scale = 0.75;

// You can also set the same properties a shape have.
group.linewidth = 7;

two.update();
</script>
<hr/>
<p>draw-animation</p>
<div id="draw-animation">上述繪圖程式碼:</div>
<div>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;div id="draw-animation"&gt;&lt;/div&gt;
&lt;script&gt;
var elem = document.getElementById('draw-animation');
var two = new Two({ width: 285, height: 200 }).appendTo(elem);

var circle = two.makeCircle(-70, 0, 50);
var rect = two.makeRectangle(70, 0, 100, 100);
circle.fill = '#FF8000';
rect.fill = 'rgba(0, 200, 255, 0.75)';

var group = two.makeGroup(circle, rect);
group.translation.set(two.width / 2, two.height / 2);
group.scale = 0;
group.noStroke();

// Bind a function to scale and rotate the group
// to the animation loop.
two.bind('update', function(frameCount) {
  // This code is called everytime two.update() is called.
  // Effectively 60 times per second.
  if (group.scale &gt; 0.9999) {
    group.scale = group.rotation = 0;
  }
  var t = (1 - group.scale) * 0.125;
  group.scale += t;
  group.rotation += t * 4 * Math.PI;
}).play();  // Finally, start the animation loop
&lt;/script&gt;</pre>
</div>
<script>
var elem = document.getElementById('draw-animation');
var two = new Two({ width: 285, height: 200 }).appendTo(elem);

var circle = two.makeCircle(-70, 0, 50);
var rect = two.makeRectangle(70, 0, 100, 100);
circle.fill = '#FF8000';
rect.fill = 'rgba(0, 200, 255, 0.75)';

var group = two.makeGroup(circle, rect);
group.translation.set(two.width / 2, two.height / 2);
group.scale = 0;
group.noStroke();

// Bind a function to scale and rotate the group
// to the animation loop.
two.bind('update', function(frameCount) {
  // This code is called everytime two.update() is called.
  // Effectively 60 times per second.
  if (group.scale > 0.9999) {
    group.scale = group.rotation = 0;
  }
  var t = (1 - group.scale) * 0.125;
  group.scale += t;
  group.rotation += t * 4 * Math.PI;
}).play();  // Finally, start the animation loop
</script><h3>Konva demo</h3>
<script src="/static/konva.min.js"></script>
<div id="container"></div>
<script>
var width = 800;
      var height = 600;

      // globals
      var curveLayer, lineLayer, anchorLayer, quad, bezier;

      function updateDottedLines() {
        var q = quad;
        var b = bezier;

        var quadLine = lineLayer.findOne('#quadLine');
        var bezierLine = lineLayer.findOne('#bezierLine');

        quadLine.points([
          q.start.attrs.x,
          q.start.attrs.y,
          q.control.attrs.x,
          q.control.attrs.y,
          q.end.attrs.x,
          q.end.attrs.y
        ]);

        bezierLine.points([
          b.start.attrs.x,
          b.start.attrs.y,
          b.control1.attrs.x,
          b.control1.attrs.y,
          b.control2.attrs.x,
          b.control2.attrs.y,
          b.end.attrs.x,
          b.end.attrs.y
        ]);
        lineLayer.draw();
      }
      function buildAnchor(x, y) {
        var anchor = new Konva.Circle({
          x: x,
          y: y,
          radius: 20,
          stroke: '#666',
          fill: '#ddd',
          strokeWidth: 2,
          draggable: true
        });

        // add hover styling
        anchor.on('mouseover', function() {
          document.body.style.cursor = 'pointer';
          this.strokeWidth(4);
          anchorLayer.draw();
        });
        anchor.on('mouseout', function() {
          document.body.style.cursor = 'default';
          this.strokeWidth(2);
          anchorLayer.draw();
        });

        anchor.on('dragend', function() {
          drawCurves();
          updateDottedLines();
        });

        anchorLayer.add(anchor);
        return anchor;
      }
      function drawCurves() {
        var context = curveLayer.getContext();

        context.clear();

        // draw quad
        context.beginPath();
        context.moveTo(quad.start.attrs.x, quad.start.attrs.y);
        context.quadraticCurveTo(
          quad.control.attrs.x,
          quad.control.attrs.y,
          quad.end.attrs.x,
          quad.end.attrs.y
        );
        context.setAttr('strokeStyle', 'red');
        context.setAttr('lineWidth', 4);
        context.stroke();

        // draw bezier
        context.beginPath();
        context.moveTo(bezier.start.attrs.x, bezier.start.attrs.y);
        context.bezierCurveTo(
          bezier.control1.attrs.x,
          bezier.control1.attrs.y,
          bezier.control2.attrs.x,
          bezier.control2.attrs.y,
          bezier.end.attrs.x,
          bezier.end.attrs.y
        );
        context.setAttr('strokeStyle', 'blue');
        context.setAttr('lineWidth', 4);
        context.stroke();
      }

      var stage = new Konva.Stage({
        container: 'container',
        width: width,
        height: height
      });

      anchorLayer = new Konva.Layer();
      lineLayer = new Konva.Layer();

      // curveLayer just contains a canvas which is drawn
      // onto with the existing canvas API
      curveLayer = new Konva.Layer();

      var quadLine = new Konva.Line({
        dash: [10, 10, 0, 10],
        strokeWidth: 3,
        stroke: 'black',
        lineCap: 'round',
        id: 'quadLine',
        opacity: 0.3,
        points: [0, 0]
      });

      var bezierLine = new Konva.Line({
        dash: [10, 10, 0, 10],
        strokeWidth: 3,
        stroke: 'black',
        lineCap: 'round',
        id: 'bezierLine',
        opacity: 0.3,
        points: [0, 0]
      });

      // add dotted line connectors
      lineLayer.add(quadLine);
      lineLayer.add(bezierLine);

      quad = {
        start: buildAnchor(60, 30),
        control: buildAnchor(240, 110),
        end: buildAnchor(80, 160)
      };

      bezier = {
        start: buildAnchor(280, 20),
        control1: buildAnchor(530, 40),
        control2: buildAnchor(480, 150),
        end: buildAnchor(300, 150)
      };

      // keep curves insync with the lines
      anchorLayer.on('beforeDraw', function() {
        drawCurves();
        updateDottedLines();
      });

      stage.add(curveLayer);
      stage.add(lineLayer);
      stage.add(anchorLayer);

      drawCurves();
      updateDottedLines();
</script>
<p>上述繪圖程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/konva.min.js"&gt;&lt;/script&gt;
&lt;div id="container"&gt;&lt;/div&gt;
&lt;script&gt;
      var width = 800;
      var height = 600;

      // globals
      var curveLayer, lineLayer, anchorLayer, quad, bezier;

      function updateDottedLines() {
        var q = quad;
        var b = bezier;

        var quadLine = lineLayer.findOne('#quadLine');
        var bezierLine = lineLayer.findOne('#bezierLine');

        quadLine.points([
          q.start.attrs.x,
          q.start.attrs.y,
          q.control.attrs.x,
          q.control.attrs.y,
          q.end.attrs.x,
          q.end.attrs.y
        ]);

        bezierLine.points([
          b.start.attrs.x,
          b.start.attrs.y,
          b.control1.attrs.x,
          b.control1.attrs.y,
          b.control2.attrs.x,
          b.control2.attrs.y,
          b.end.attrs.x,
          b.end.attrs.y
        ]);
        lineLayer.draw();
      }
      function buildAnchor(x, y) {
        var anchor = new Konva.Circle({
          x: x,
          y: y,
          radius: 20,
          stroke: '#666',
          fill: '#ddd',
          strokeWidth: 2,
          draggable: true
        });

        // add hover styling
        anchor.on('mouseover', function() {
          document.body.style.cursor = 'pointer';
          this.strokeWidth(4);
          anchorLayer.draw();
        });
        anchor.on('mouseout', function() {
          document.body.style.cursor = 'default';
          this.strokeWidth(2);
          anchorLayer.draw();
        });

        anchor.on('dragend', function() {
          drawCurves();
          updateDottedLines();
        });

        anchorLayer.add(anchor);
        return anchor;
      }
      function drawCurves() {
        var context = curveLayer.getContext();

        context.clear();

        // draw quad
        context.beginPath();
        context.moveTo(quad.start.attrs.x, quad.start.attrs.y);
        context.quadraticCurveTo(
          quad.control.attrs.x,
          quad.control.attrs.y,
          quad.end.attrs.x,
          quad.end.attrs.y
        );
        context.setAttr('strokeStyle', 'red');
        context.setAttr('lineWidth', 4);
        context.stroke();

        // draw bezier
        context.beginPath();
        context.moveTo(bezier.start.attrs.x, bezier.start.attrs.y);
        context.bezierCurveTo(
          bezier.control1.attrs.x,
          bezier.control1.attrs.y,
          bezier.control2.attrs.x,
          bezier.control2.attrs.y,
          bezier.end.attrs.x,
          bezier.end.attrs.y
        );
        context.setAttr('strokeStyle', 'blue');
        context.setAttr('lineWidth', 4);
        context.stroke();
      }

      var stage = new Konva.Stage({
        container: 'container',
        width: width,
        height: height
      });

      anchorLayer = new Konva.Layer();
      lineLayer = new Konva.Layer();

      // curveLayer just contains a canvas which is drawn
      // onto with the existing canvas API
      curveLayer = new Konva.Layer();

      var quadLine = new Konva.Line({
        dash: [10, 10, 0, 10],
        strokeWidth: 3,
        stroke: 'black',
        lineCap: 'round',
        id: 'quadLine',
        opacity: 0.3,
        points: [0, 0]
      });

      var bezierLine = new Konva.Line({
        dash: [10, 10, 0, 10],
        strokeWidth: 3,
        stroke: 'black',
        lineCap: 'round',
        id: 'bezierLine',
        opacity: 0.3,
        points: [0, 0]
      });

      // add dotted line connectors
      lineLayer.add(quadLine);
      lineLayer.add(bezierLine);

      quad = {
        start: buildAnchor(60, 30),
        control: buildAnchor(240, 110),
        end: buildAnchor(80, 160)
      };

      bezier = {
        start: buildAnchor(280, 20),
        control1: buildAnchor(530, 40),
        control2: buildAnchor(480, 150),
        end: buildAnchor(300, 150)
      };

      // keep curves insync with the lines
      anchorLayer.on('beforeDraw', function() {
        drawCurves();
        updateDottedLines();
      });

      stage.add(curveLayer);
      stage.add(lineLayer);
      stage.add(anchorLayer);

      drawCurves();
      updateDottedLines();
    
&lt;/script&gt;</pre>
<p></p><h3>matter.js</h3>
<p><a href="https://github.com/MonliH/PhysicsSim">https://github.com/MonliH/PhysicsSim</a></p>
<p><a href="http://brm.io/matter-js/">http://brm.io/matter-js/</a></p>
<p><a href="https://p5js.org/">https://p5js.org/</a></p>
<p></p>
<script src="/static/p5.min.js"></script>
<script src="/static/matter.min.js"></script>
<script>
function Box(x, y, w, h) {
  options = {
    friction: 0.2,
    restitution: 0.5
  }
  this.body = Bodies.rectangle(x, y, w, h, options);
  this.w = w;
  this.h = h;
  World.add(world, this.body);
  
  this.show = function() {
    var pos = this.body.position;
    var angle = this.body.angle;
    
    push();
    rectMode(CENTER);
    strokeWeight(1);
    stroke(255);
    fill(127);
    translate(pos.x, pos.y);
    rotate(angle);
    rect(0, 0, this.w, this.h);
    pop();
    
  }
}

function Boundary(x, y, w, h) {
  options = {
    friction: 0.3,
    restitution: 0.6,
    isStatic: true
  }
  this.body = Bodies.rectangle(x, y, w, h, options);
  this.w = w;
  this.h = h;
  World.add(world, this.body);
  
  this.show = function() {
    var pos = this.body.position;
    var angle = this.body.angle;
    
    push();
    rectMode(CENTER);
    strokeWeight(1);
    noStroke();
    fill(0);
    translate(pos.x, pos.y);
    rotate(angle);
    rect(0, 0, this.w, this.h);
    pop();
    
  }
}

// module aliases
var Engine = Matter.Engine,
    Render = Matter.Render,
    World = Matter.World,
    Bodies = Matter.Bodies;

var engine;
var world;
var boxes = [];

function setup() {
    createCanvas(400, 400);
    engine = Engine.create();
    world = engine.world;
    engine.positionIterations = 5;
    engine.velocityIterations = 5;
    ground = new Boundary(200, height, width, 3);
    wall1 = new Boundary(0, 0, 3, height*2);
    wall2 = new Boundary(0, width, 3, height*2);
    World.add(world, ground, wall1);
    //Engine.run(engine);
}

function mouseDragged() {
  boxes.push(new Box(mouseX, mouseY, 20, 20));
}

function mousePressed() {
  boxes.push(new Box(mouseX, mouseY, 20, 20));
}

function draw() {
    background(51);
    Engine.update(engine);
    for (var i = 0; i < boxes.length; i++) {
      boxes[i].show();
    }
    ground.show();
    wall1.show();
}
</script><h2>實習項目四</h2>
<ol>
<li>多人共同維護 Github Pages 內容, 導入 CMSimfly</li>
<li>將 CMSimfly 部署到 Github Pages 與 Heroku</li>
<li>可以多人直接在 Github 倉儲中維護的 <a href="https://mde.tw/webots/index.html?book=guide-zh_TW">https://mde.tw/webots/index.html?book=guide-zh_TW</a> (從 <a href="https://github.com/omichel/webots">https://github.com/omichel/webots</a> clone 倉儲內容, 將 docs 目錄設為 Github Pages, 修改 docs 目錄下的 .gitignores 與 js/viewer.js, 倉儲位置: <a href="https://github.com/mdecourse/webots">https://github.com/mdecourse/webots</a>)</li>
<li>比較 ungit 與 GitExtensions 使用效能 (<a href="https://drive.google.com/open?id=1_pH2cKAGeH3OGwZUFPJwsi7WcX3ELvph">下載 GitExtensions.7z</a>)</li>
</ol>
<h4>參考資料</h4>
<p><a href="https://github.com/showdownjs/showdown">https://github.com/showdownjs/showdown</a> </p>
<p><a href="https://github.com/gitextensions/gitextensions">https://github.com/gitextensions/gitextensions</a></p><h2>實習項目五</h2>
<p>以 Leo Editor 管理 Reveal (協同簡報) 與 Pelican blog (協同網誌)</p>
<p>多人協同 CMSimfly  - 利用 Leo Editor 解讀無法自動合併的 content.htm</p>
<p></p>
<h4></h4>
<h1>分組專題</h1>
<h4>CMSimfly</h4>
<p>CMSimfly 中有不少 Bugs  (或功能改進之處):</p>
<ol>
<li>在某些情況下會刪除使用者的 content.htm, 只留下內建單一頁面的內容</li>
<li>在某些情況下無法解讀使用者希望置入的內容, 而導致錯誤</li>
<li>動態網頁與靜態網頁無 template 配置設計</li>
<li>非同步多人維護 content.htm 時, 能夠改進檔案的合併</li>
<li>能否提供一個更容易使用的 reveal 編輯環境</li>
<li>能否提供一個更容易使用的 pelican blog 編輯環境</li>
</ol>
<h4>配置內容管理系統</h4>
<p>如何建立一台電腦伺服器, 配置 CMSimfly?</p>
<h4>網路配置</h4>
<p>如何善用網路頻寬, 改善電腦輔助設計室的網路配置? 如何繪製並維護網路配置圖?</p>
<h4>個人電腦使用模式</h4>
<p>如何根據學校與系上所提供的各種軟硬體, 替每一成員找出最佳的個人電腦使用模式? 購買桌上型電腦? 何種規格? 購買筆記型電腦? 何種規格? 如何配置管理個人使用範圍的電腦相關軟硬體?</p>
<h2>電腦安裝</h2>
<h4>電腦硬體</h4>
<p><a href="/downloads/Computer_Overview_and_hardware.pdf">computer overview and hardware.pdf</a></p>
<p>(<a href="https://www.cs.auckland.ac.nz/compsci111ssc/lectures/LectureSlides/">https://www.cs.auckland.ac.nz/compsci111ssc/lectures/LectureSlides/</a>)</p>
<h4>Computer 硬體</h4>
<p><img alt="" height="248" src="/images/computer_hardware.png" width="600"/></p>
<h4>Personal Computer 類別</h4>
<p><img alt="" height="262" src="/images/computer_types.png" width="600"/></p>
<h4>機架式(rack)電腦伺服器</h4>
<p><img alt="" height="334" src="/images/rack_server.png" width="600"/></p>
<h4>UPS (Uninterruptible Power Supply) 不斷電系統</h4>
<p><img alt="" height="450" src="/images/APC_smart_ups.jpg" width="600"/></p>
<h4>Motherboard 主機板</h4>
<p><img alt="" height="395" src="/images/motherboard.png" width="600"/></p>
<h4>PCI (<span>Peripheral Component Interconnect)</span>網路卡</h4>
<p><img alt="" height="320" src="/images/Ethernet_NIC_100Mbit_PCI.jpg" width="600"/></p>
<h4>Power Supply 電源供應器</h4>
<p><img alt="" height="466" src="/images/power_supply.jpg" width="466"/></p>
<h4>個人桌上型電腦內部</h4>
<p><img alt="" height="358" src="/images/inside_desktop.png" width="600"/></p>
<h4>筆記型電腦內部</h4>
<p><img alt="" height="320" src="/images/insite_laptop.png" width="600"/></p>
<h4>操作系統</h4>
<p>Windows 10</p>
<p><a href="https://www.microsoft.com/zh-tw/software-download/windows10">https://www.microsoft.com/zh-tw/software-download/windows10</a> </p>
<p>Ubuntu</p>
<p><a href="https://www.ubuntu.com/download">https://www.ubuntu.com/download</a> </p>
<p>Virtualbox</p>
<p><a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a> </p>
<h3>建立伺服器</h3>
<h4>Windows Server</h4>
<p>學習如何建立 Windows 伺服器</p>
<h4>Ubuntu Server</h4>
<p>學習如何建立 Ubuntu 伺服器</p>
<h2>網路配置</h2>
<h4>網路連線</h4>
<p>實體連線</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Category_6_cable">https://en.wikipedia.org/wiki/Category_6_cable</a> </p>
<p>無線網路</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Wi-Fi">https://en.wikipedia.org/wiki/Wi-Fi</a> </p>
<h4>網路設定</h4>
<p>TCP</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">https://en.wikipedia.org/wiki/Transmission_Control_Protocol</a> </p>
<p>IP</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Internet_Protocol">https://en.wikipedia.org/wiki/Internet_Protocol</a> </p>
<p></p>
<p>機械設計網路架構</p>
<p style="padding-left: 30px;">IP addresses</p>
<p style="padding-left: 30px;">DNS Servers</p>
<p style="padding-left: 30px;">Proxy Servers</p>
<p style="padding-left: 30px;">網路線配置</p>
<h3>Proxy Server</h3>
<p>Squid 設定檔案</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">acl cad_lab src 140.130.17.0/24
acl cad_lab src 2001:288:6004:17::/64
 
acl SSL_ports port 443
acl Safe_ports port 80 # http
acl Safe_ports port 88
 
#acl Safe_ports port 21 # ftp
acl SSL_ports port 8443
acl Safe_ports port 8443
 
acl SSL_ports port 9443
acl Safe_ports port 9443
 
acl SSL_ports port 22
acl Safe_ports port 22
 
acl Safe_ports port 443 # https
acl Safe_ports port 1025-65535 # unregistered ports
acl Safe_ports port 280 # http-mgmt
acl Safe_ports port 488 # gss-http
acl Safe_ports port 591 # filemaker
acl Safe_ports port 777 # multiling http
acl CONNECT method CONNECT
 
# Deny requests to certain unsafe ports
http_access deny !Safe_ports
 
# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports
 
http_access allow cad_lab
http_access deny all
# Only allow cachemgr access from localhost
http_access allow localhost manager
http_access deny manager
 
#http_access allow localnet
http_access allow localhost
 
# And finally deny all other access to this proxy
http_access deny all
 
# Squid normally listens to port 3128
http_port 3128
 
#cache_dir ufs /var/spool/squid3 100 16 256
icp_port 3130
icp_access allow all
 
cache_dir ufs /var/spool/squid3 2000 16 256
cache_peer 140.130.17.2 sibling 3128 3130
cache_peer 140.130.17.4 sibling 3128 3130
cache_peer 140.130.17.9 sibling 3128 3130
cache_peer 140.130.17.22 sibling 3128 3130
cache_peer 140.130.17.23 sibling 3128 3130
 
#
# Add any of your own refresh_pattern entries above these.
#
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880
refresh_pattern . 0 20% 4320</pre>
<p></p>
<h1>程式開發環境</h1>
<p><span>可攜 Python 系統: </span><a href="https://drive.google.com/open?id=1qSnGb4NBmfGG0jGVNfQJX_9TNVweIdFW">p37-18.12.7z</a><span> (2018.12 版本,  下載檔案約 500 MB, 解開壓縮檔案後約 2 GB, 以 start.bat 啟動後即可使用) </span></p>
<h4>啟動批次檔案</h4>
<p>start.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
REM 設定 y 硬碟代號與 data 目錄對應
set Disk=y
subst %Disk%: "data"
REM 設定 leo 相關對應 Home 位置
set HomePath=%Disk%:\home_cadlab
set HomeDrive=%Disk%:\home_cadlab
set Home=%Disk%:\home_cadlab
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
REM 將後續的指令執行, 以 %Disk% 為主
%Disk%:
REM 設定 PYTHONPATH
set PYTHONPATH=%Disk%:\p37\DLLs;%Disk%:\p37\Lib;%Disk%:\p37\Lib\site-packages;
set PYTHONHOME=%Disk%:\p37
REM for Qt and Qt Creator
set LLVM_INSTALL_DIR=%Disk%:\LLVM;
set QBS_INSTALL_DIR=%Disk%:\qbs-windows-x86_64-1.10.0;
REM for TCL
set TCL_LIBRARY=%Disk%:\p37\tcl\tcl8.6
set TK_LIBRARY=%Disk%:\p37\tcl\tcl8.6
REM 設定 Leo 所用的編輯器
set LEO_EDITOR=%Disk%:\scite\bin\Sc1.exe;
set BOOST_ROOT=%Disk%:\boost_1_66_0\;
REM set CMAKE_PREFIX_PATH=%Disk%:\msys64\mingw64\
REM for fossil https 連線設定
REM 若在近端使用 fossil ui 則要蓋掉
REM set HTTPS=on
REM 指令搜尋路徑設定
REM set path1=%PATH%;%Disk%:;%Disk%:\p37;%Disk%:\git\bin;%Disk%:\stunnel\bin;%Disk%:\sqlite-tools;%Disk%:\p37\Scripts;%Disk%:\Git\bin;%Disk%:\vrep331;
REM path1 is base of this portable Python3.6 system
set path1=%Disk%:;%Disk%:\p37;%Disk%:\git\bin;%Disk%:\stunnel\bin;%Disk%:\sqlite-tools;%Disk%:\p37\Scripts;%Disk%:\Git\bin;%Disk%:\vrep331;%Disk%:\p37\Lib\site-packages\PyQt5\Qt\bin;
REM path2 is for pandoc and miktex
set path2=%Disk%:\pandoc-2.0.2;%Disk%:\miktex_portable\texmfs\install\miktex\bin;%Disk%:\lua-5.3.4\bin;%Disk%:\coreutils-5.3.0\bin;%Disk%:\qtcreator-4.7.0-rc1\bin;%Disk%:\patch-2.5.9-7-bin\bin;
REM path3 is for gcc development 
set path3=%Disk%:\msys64\mingw64\bin;%Disk%:\swigwin-3.0.12;%Disk%:\cmake-3.10.1-win64-x64\bin;%Disk%:\diffutils-2.8.7-1\bin;%Disk%:\patch-2.5.9-7\bin;%Disk%:\graphviz-2.38\bin;
set path4=%Disk%:\boost_1_66_0\;%Disk%:\Strawberry\perl\bin;%D%:\jom_1_1_2;%Disk%:\LLVM\bin;%Disk%:\QtCreator\bin;%Disk%:\vrep340_rev1;%Disk%:\p37\tcl\tcl8.6;%Disk%:\xsltproc;
set path5=%Disk%:\ffmpeg-20180504-dc7a8f7-win64-static\bin;%Disk%:\oce-0.18.1\bin\;%Disk%:\oce-0.18.1\lib\;%Disk%:\gnuplot\bin;
set JAVA_HOME=%Disk%:\Java\jdk1.8.0_172;
set ANDROID_HOME=%Disk%:\Android\sdk;
set path6=%Disk%:\Java\jdk1.8.0_172\bin;%Disk%:\Java\jre1.8.0_172\bin;%Disk%:\Android\AndroidStudio\bin;%Disk%:\Android\sdk\tools;%Disk%:\Android\sdk\platform-tools;%Disk%:\BIND9.12.2-P2.x64;%Disk%:\heroku\bin;
set path7=%Disk%:\pandoc-2.4-windows-x86_64;%Disk%:\miktex_portable\texmfs\install\miktex\bin;%Disk%:\wget-1.11.4-1-bin\bin;%Disk%:\openssl-0.9.8h-1-bin\bin;
REM for Pythonocc under MSYS2 according to https://groups.google.com/forum/?utm_medium=email&amp;utm_source=footer#!msg/pythonocc/z-NI9A-Vyic/8QjD81q-AwAJ
set CSF_GraphicShr=%Disk%:\oce-0.18.1\bin\TKOpenGl.dll
path=%path%;%path1%;%path2%;%path3%;%path4%;%path5%;%path6%;%path7%;%Disk%:\p37\site-packages\scipy\extra_dll;%Disk%:\scite\bin;
start /MIN %Disk%:\scite\bin\Sc1.exe
start /MIN %Disk%:\scite\bin\Sc1.exe
start /MIN cmd.exe
start /MIN cmd.exe
REM start /MIN cmd.exe /k "y:\cp2018.bat"
REM start /MIN cmd.exe /k "y:\cp2018_http_server.bat
REM start /MIN cmd.exe /k "y:\cadp2018.bat"
REM 啟動 Leo 編輯器
%Disk%:\p37\python.exe %Disk%:\launchLeo.py
REM 啟動 stunnel
REM start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\tmp\fossil_repo
REM start /MIN stunnel.exe
REM start qtcreator
Exit</pre>
<p>stop.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
REM 關閉 SciTE
taskkill /IM Sc1.exe /F
REM 關閉 python
taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
REM 關閉 stunnel
taskkill /IM stunnel.exe /F
REM 關閉 fossil
taskkill /IM fossil.exe /F
rem taskkill /IM sharex.exe /F
REM 清除 log 資料
path=%PATH%;
REM del /Q /F  V:\tmp\*.*
REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F
REM taskkill /IM mingw32 /F
EXIT</pre>
<h4>SciTE</h4>
<p style="padding-left: 30px;"><a href="https://www.scintilla.org/SciTE.html">https://www.scintilla.org/SciTE.html</a> </p>
<h4>Git</h4>
<p style="padding-left: 30px;"><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> </p>
<h4>Heroku cli</h4>
<p style="padding-left: 30px;"><a href="/downloads/heroku_kmol.7z">heroku_kmol.7z</a></p>
<h4>Python</h4>
<p style="padding-left: 30px;"><a href="https://www.python.org/">https://www.python.org/</a> </p>
<h4>Leo Editor</h4>
<p style="padding-left: 30px;"><a href="http://leoeditor.com/">http://leoeditor.com/</a> </p>
<h2>Windows 10</h2>
<h4>Windows 批次檔</h4>
<p style="padding-left: 30px;"><a href="/downloads/batch_script_tutorial.pdf">ref1.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Windows_Command_Line_Vic_Laurie.pdf">ref2.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Microsoft_Windows_7_In_Depth_CH29.pdf">ref3.pdf</a></p>
<h4>Git</h4>
<p style="padding-left: 30px;"><a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> </p>
<h4>Python 程式環境</h4>
<p style="padding-left: 30px;">Learn to Program with Python 3 - A Step-by-Step Guide to Programming</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3879-0">https://link.springer.com/book/10.1007/978-1-4842-3879-0</a> </p>
<p style="padding-left: 30px;">Beginning Python - From Novice to Professional</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-0028-5">https://link.springer.com/book/10.1007/978-1-4842-0028-5</a> </p>
<p style="padding-left: 30px;">Programming with Python</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-981-10-3277-6">https://link.springer.com/book/10.1007/978-981-10-3277-6</a> </p>
<p style="padding-left: 30px;">Python Recipes Handbook - A Problem-Solution Approach</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-0241-8">https://link.springer.com/book/10.1007/978-1-4842-0241-8</a> </p>
<p style="padding-left: 30px;">Python 2 and 3 Compatibility - With Six and Python-Future Libraries</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-2955-2">https://link.springer.com/book/10.1007/978-1-4842-2955-2</a> </p>
<h4>Flask 網際框架</h4>
<p style="padding-left: 30px;">Framework (框架)  - 預先配置使用方法、模組與標準化架構的程式組合,  讓開發者可以快速完成特定工作.</p>
<p style="padding-left: 30px;">Flask 則屬於建構網站用之伺服器後端 (Back-end) 的 Python 程式框架</p>
<p style="padding-left: 30px;">另外有包含<a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets"> CSS</a> 與 Javascript, 屬於建構網站用之前端 (Front-end) 程式框架, 例如: <a href="https://jquery.com/">Jquery</a>.</p>
<p style="padding-left: 30px;"><a href="http://flask.pocoo.org/">http://flask.pocoo.org/</a> </p>
<h4>Leo Editor 管理系統</h4>
<p style="padding-left: 30px;"><a href="http://leoeditor.com/">http://leoeditor.com/</a> </p>
<h2>Ubuntu</h2>
<h4>Git</h4>
<p style="padding-left: 30px;">sudo apt install git</p>
<h4>Python 程式環境</h4>
<p style="padding-left: 30px;"><a href="https://pythonclock.org/">https://pythonclock.org/</a> </p>
<h4>Flask 網際框架</h4>
<p style="padding-left: 30px;">sudo pip install flask</p>
<h4>Leo Editor 管理系統</h4>
<p style="padding-left: 30px;">sudo pip install leo</p>
<h2>CentOS</h2>
<h4>The Definitive Guide to CentOS</h4>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-1931-6">https://link.springer.com/book/10.1007/978-1-4302-1931-6</a> </p>
<h4>Foundations of CentOS Linux</h4>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-1965-1">https://link.springer.com/book/10.1007/978-1-4302-1965-1</a> </p>
<h4>Learn CentOS Linux Network Services</h4>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-2379-6">https://link.springer.com/book/10.1007/978-1-4842-2379-6</a> </p>
<p></p>
<h1>CMSimfly 安裝</h1>
<p>Windows 10 執行 (近端內容編輯)</p>
<p style="padding-left: 30px;">python wsgi.py</p>
<p>Github</p>
<p style="padding-left: 30px;">利用 Github Pages 伺服 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 的靜態網頁系統</p>
<p>Heroku</p>
<p style="padding-left: 30px;">利用 Python 執行 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 的動態網頁系統</p>
<p>Ubuntu 自架主機</p>
<p style="padding-left: 30px;">採用 <a href="https://uwsgi-docs.readthedocs.io/en/latest/">uwsgi</a> 執行</p>
<p></p>
<h2>Github</h2>
<p><a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a> </p>
<p>利用 <a href="https://pages.github.com/">Github Pages</a> 伺服靜態網頁系統</p>
<h2>Heroku</h2>
<p><a href="https://www.heroku.com/">https://www.heroku.com/</a> </p>
<p><a href="/downloads/heroku_kmol.7z">heroku_kmol.7z</a> (Heroku Windows 10 64 位元可攜系統)</p>
<h2>自架主機</h2>
<h4>Ubuntu under Virtualbox</h4>
<h1>CMSimfly 開發</h1>
<p>線上程式環境</p>
<p style="padding-left: 30px;">Javascript</p>
<p style="padding-left: 60px;"><a href="https://www.javascript.com/">https://www.javascript.com/</a> </p>
<p style="padding-left: 30px;">Brython</p>
<p style="padding-left: 60px;"><a href="https://brython.info/">https://brython.info/</a>　</p>
<p style="padding-left: 30px;">Lua</p>
<p style="padding-left: 60px;"><a href="https://github.com/fengari-lua/fengari-web">https://github.com/fengari-lua/fengari-web</a> </p>
<p>templates</p>
<p style="padding-left: 30px;"><a href="http://flask.pocoo.org/docs/1.0/tutorial/templates/">http://flask.pocoo.org/docs/1.0/tutorial/templates/</a> </p>
<p>extensions</p>
<p style="padding-left: 30px;"><a href="http://flask.pocoo.org/extensions/">http://flask.pocoo.org/extensions/</a> </p>
<h2>Front-end</h2>
<p><a href="https://getbootstrap.com/">https://getbootstrap.com/</a> </p>
<p>Foundation Website Creation with CSS, XHTML, and JavaScript</p>
<p><a href="https://link.springer.com/content/pdf/10.1007%2F978-1-4302-0992-8.pdf">https://link.springer.com/content/pdf/10.1007%2F978-1-4302-0992-8.pdf</a> </p>
<p>Pro HTML5 with CSS, JavaScript, and Multimedia</p>
<p><a href="https://link.springer.com/content/pdf/10.1007%2F978-1-4842-2463-2.pdf">https://link.springer.com/content/pdf/10.1007%2F978-1-4842-2463-2.pdf</a> </p>
<p>Getting StartED with CSS</p>
<p><a href="https://link.springer.com/content/pdf/10.1007%2F978-1-4302-2544-7.pdf">https://link.springer.com/content/pdf/10.1007%2F978-1-4302-2544-7.pdf</a> </p>
<p>CSS Mastery</p>
<p><a href="https://link.springer.com/content/pdf/10.1007%2F978-1-4302-5864-3.pdf">https://link.springer.com/content/pdf/10.1007%2F978-1-4302-5864-3.pdf</a> </p>
<p>CSS Quick Syntax Reference Guide</p>
<p><a href="https://link.springer.com/content/pdf/10.1007%2F978-1-4302-6491-0.pdf">https://link.springer.com/content/pdf/10.1007%2F978-1-4302-6491-0.pdf</a> </p>
<p>AdvancED CSS</p>
<p><a href="https://link.springer.com/content/pdf/10.1007%2F978-1-4302-1933-0.pdf">https://link.springer.com/content/pdf/10.1007%2F978-1-4302-1933-0.pdf</a> </p>
<h2>繪圖</h2>
<p>網路配置圖</p>
<p><a href="http://cadlab.mde.tw/post/cadlab-ji-jie-she-ji-xi-wang-lu-pei-zhi-tu.html">http://cadlab.mde.tw/post/cadlab-ji-jie-she-ji-xi-wang-lu-pei-zhi-tu.html</a> </p>
<h2>ROC flag</h2>
<!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p></p>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
<p><canvas height="400" id="plotarea" width="600"></canvas></p>
<script type="text/python">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<h2>Spur Gears</h2>
<!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p></p>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
<p><canvas height="600" id="onegear" width="800"></canvas></p>
<div height="20" id="onegear_div" width="800"></div>
<p><input id="n1" type="text" value="13"/><br/> <input id="n2" type="text" value="11"/><br/> <input id="n3" type="text" value="17"/><br/> <button id="button">Set Number of Gears</button></p>
<script type="text/python3">
from browser import document as doc
from browser import html
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd>rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd>rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd>rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

canvas = doc['onegear']
ctx = canvas.getContext("2d")

# 以 button 驅動的事件函式
def setgearnumber(e):
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    x = (canvas.width)/2
    y = (canvas.height)/2
    if doc["n1"].value.isdigit():
        n17 = int(doc["n1"].value)
    else:
        n17 = 17

    if doc["n2"].value.isdigit():
        n11 = int(doc["n2"].value)
    else:
        n11 = 11

    if doc["n3"].value.isdigit():
        n13 = int(doc["n3"].value)
    else:
        n13 = 13

    # 只使用畫布高度的 80%
    canvas_size = canvas.height*0.4
    r17 = canvas_size*n17/(n17+n11+n13)
    r11 = canvas_size*n11/(n17+n11+n13)
    r13 = canvas_size*n13/(n17+n11+n13)
    # 計算各齒輪中心座標
    x17 = x - r17-r11
    y17 = y

    x11 = x 
    y11 = y

    x13 = x + r11+r13
    y13 = y

    pa = 20
    # 開始繪製齒輪
    # 儲存原有的座標系統
    ctx.save()
    # 平移到齒輪圓心
    ctx.translate(x17, y17)
    # 以齒輪圓心旋轉 90 度, 讓紅色標線在齒輪右側保持水平
    ctx.rotate(90*deg)
    # 平移回原來的座標原點
    ctx.translate(-x17, -y17)
    gear17 = Spur(ctx).Gear(x17, y17, r17, n17, pa, "blue")
    # 回復原有的座標系統
    ctx.restore()

    ctx.save()
    ctx.translate(x11, y11)
    # 中間齒輪轉動 -90 度加上一齒, 可以與左側齒輪囓合
    ctx.rotate(-90*deg-math.pi/n11)
    ctx.translate(-x11, -y11)
    gear11 = Spur(ctx).Gear(x11, y11, r11, n11, pa, "blue")
    ctx.restore()

    ctx.save()
    ctx.translate(x13, y13)
    # 右側齒輪轉動 -90 度加上一齒, 可以與原來標線在左側水平的中間齒輪囓合, 但是目前中間齒輪的標線已經轉了 180 度加或減一次
    # 必須配合兩齒的速比轉換旋轉角, 以便讓中間齒輪與右側齒輪囓合
    ctx.rotate(-90*deg-math.pi/n13+(180*deg+math.pi/n11)*n11/n13)
    ctx.translate(-x13, -y13)
    gear13 = Spur(ctx).Gear(x13, y13, r13, n13, pa, "blue")
    ctx.restore()

setgearnumber(True)

'''
div = doc["onegear_div"]
form = html.FORM()
input1 = html.INPUT(type="text", id="n1", name="n1", value="13")
input2 = html.INPUT(type="text", id="n2", name="n2", value="11")
input3 = html.INPUT(type="text", id="n3", name="n3", value="19")
div <= input1 + html.BR() + input2 + html.BR() + input3
'''
doc['button'].bind('click',setgearnumber)
</script><h1>相關技術</h1>
<p>本課程中的網際內容管理, 是以機械設計相關應用作為出發點, 意即使用者的內容包含與機械設計相關的口語 (oral presentation)、文字 (text)、靜態繪圖 (2D graphics)、動態繪圖 (3D 與 animation)、影音資料 (mp4)與實作表達呈現相關的資料.</p>
<p>口語表達: 由設計者口說並輔以其他內容, 說明設計理念、流程與施作方法等.</p>
<p>文字表達: 利用文字編寫, 說明設計內容.</p>
<p>2D 內容表達: 利用 gif、png 、jpg 或 2D pdf 等表達流程、圖表或與設計有關的相關影像或工程圖內容.</p>
<p>3D 內容表達: 利用 X3d 、three.js 或 Onshape URL等類似技術, 表達與機械設計內容有關的零組件.</p>
<p>數學表達: 利用數學理論, 說明設計內容各組成之間的關聯.</p>
<p>影音資料: 可上傳到 Youtube, 與機械設計相關的影音檔案資料.</p>
<p>實作表達: 將上述各種表達所呈現的機械設計相關內容, 以實作方式進行表達, 其中除了呈現零組件實體模型與操作示範外, 還包括各種表達的詳細示範流程 (如何製作? 使用哪種工具? 有哪些考量? 過程中如何持續改進?.</p>
<h2>Pygrouf</h2>
<p><a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a> </p>
<p>改寫 Pygrouf 成為合用的網際同儕互評暨自評系統.</p>
<h4>參考資料</h4>
<p style="padding-left: 30px;"><a href="https://teaching.berkeley.edu/resources/assessment-and-evaluation/design-assessment/rubrics">https://teaching.berkeley.edu/resources/assessment-and-evaluation/design-assessment/rubrics</a> </p>
<p style="padding-left: 30px;"><a href="http://www.teach-nology.com/web_tools/rubrics/">http://www.teach-nology.com/web_tools/rubrics/</a> </p>
<p style="padding-left: 30px;"><a href="/downloads/The Effects of Instructional Rubrics on Learning to Write.pdf">The Effects of Instructional Rubrics on Learning to Write.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/ubc/iPeer">https://github.com/ubc/iPeer</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/WebPA/WebPA">https://github.com/WebPA/WebPA</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/krstnschwpwr/peer_review_system">https://github.com/krstnschwpwr/peer_review_system</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/TEAMMATES/teammates">https://github.com/TEAMMATES/teammates</a>  (<a href="https://teammatesv4.appspot.com/">https://teammatesv4.appspot.com/</a> )</p>
<h2>Konva</h2>
<p>直接利用 Konva 與 Javascript 繪圖</p>
<p><a href="https://konvajs.github.io/">https://konvajs.github.io/</a> </p>
<h4>What is Konva.JS for?</h4>
<p>Konva.JS is a JavaScript library used to work with HTML5 canvas. A canvas element is sort of what it sounds like...a place to draw stuff. Most of the time, web pages that create customizable images for you to download--memes, avatars, graphs, etc.--are using a canvas element. Unfortunately, doing anything beyond simple drawings on the canvas can be a royal pain in the rump. But fortunately, some highly skilled programmers have written libraries of JavaScript functions to do the hard parts for us. There are many such libraries for the canvas, and Konva.JS is probably the most popular.</p>
<p>Source: <a href="https://docs.google.com/presentation/d/1IOCbk5xL_QjPaM5DqybMWLKRZCV8kxAbqNWwDX7Rj5M/htmlpresent">https://docs.google.com/presentation/d/1IOCbk5xL_QjPaM5DqybMWLKRZCV8kxAbqNWwDX7Rj5M/htmlpresent</a> </p>
<h4>Step 1: Load the Konva.JS library</h4>
<p>HTML</p>
<p>&lt;script src="https://cdn.rawgit.com/konvajs/konva/0.11.1/konva.min.js"&gt;&lt;/script&gt;</p>
<p>Konva.JS isn't part of native JavaScript. It's just a bunch of great JavaScript that somebody else already wrote, and we have to include it in our page before we can use it. We don't, however, have to copy and paste thousands of lines of their code into ours. Instead, we can just load a file that has those thousands of lines of code. There are several places that Konva.JS can be loaded from; I chose this particular URL simply because it's one of the few that survives the school's filters.</p>
<h4>Step 2: Create an empty HTML element to hold the canvas</h4>
<p>HTML</p>
<p>&lt;script src="https://cdn.rawgit.com/konvajs/konva/0.11.1/konva.min.js"&gt;&lt;/script&gt;</p>
<p>&lt;div id='my-canvas'&gt;&lt;/div&gt;</p>
<p>There doesn't need to be anything in the div, and it doesn't even necessarily have to be a div. But it does need an ID so that Konva's JavaScript can refer to it.</p>
<h4>Step 3: Create a stage to hold everything in your drawing</h4>
<p>JavaScript</p>
<p>var stage = new Konva.Stage({<br/>container: 'my-canvas', <br/>width: 400, <br/>height: 200<br/>});</p>
<p>Make sure you remember the new keyword. Konva.Stage is a special kind of function called a constructor (because it makes a new Stage object), and it won't work without the new.<br/>The parameter you pass to the constructor is an object, so use the right syntax for an object.<br/>The container key is the ID of the HTML element where your canvas will be.<br/>The stage doesn't have to be called "stage" (you're using the var keyword, so you can decide what to call it), but "stage" makes sense for simplicity.</p>
<h4>Step 4: Create a layer and add it to the stage</h4>
<p>JavaScript</p>
<p>var stage = new Konva.Stage({<br/>container: 'my-canvas', <br/>width: 400, <br/>height: 200<br/>});</p>
<p>var layer = new Konva.Layer();<br/>stage.add(layer);</p>
<p>You can create more than one layer if you want, though there probably won't be much reason to for your projects in this class. If you do create more layers, be sure to give them different names!<br/>Again, don't forget the new keyword when you create the layer.</p>
<h4>Step 5: Create shapes and add them to the layer</h4>
<p>var redRect = new Konva.Rect({<br/>x: 20, <br/>y: 50, <br/>width: 100, <br/>height: 100, <br/>fill: 'red'<br/>});</p>
<p>layer.add(redRect);</p>
<p>x and y are the coordinates of the upper left corner of the rectangle.<br/>(0, 0) is the UPPER left corner of the stage, not the lower left.<br/>(0, 100) is 100 pixels BELOW the upper left corner.<br/>You can add as many shapes as you want in a layer.<br/>And once again, don't forget new.</p>
<h4>Step 6: Actually draw the shapes you added</h4>
<p>…</p>
<p>stage.draw();</p>
<p>Just adding the shapes to the layer does NOT make the browser draw them. To save processing power, the browser doesn't draw anything on the screen until you ask it to. Add all of the shapes you want to your layer, then call stage.draw() to finally draw everything in the stage onto the canvas.</p>
<h4>Other useful properties for a Konva.Rect</h4>
<p>stroke (string) color of the rectangle's outline<br/>strokeWidth (number) width of the rectangle's outline<br/>cornerRadius (number) rounds corners to this radius<br/>opacity (number) from 0 to 1 (0 is fully transparent, 1 is fully opaque)<br/>rotation (number) degrees of clockwise rotation</p>
<p>There are far more properties than these available. See the entire list at</p>
<p><a href="http://konvajs.github.io/api/Konva.Rect.html">http://konvajs.github.io/api/Konva.Rect.html</a> </p>
<h4>Steps Recap</h4>
<p>Load the Konva.JS library (script tag in HTML)<br/>Create an HTML element to hold the canvas<br/>Create a stage<br/>Create a layer and add it to your stage<br/>Create shapes and add them to your layer<br/>Call stage.draw() to draw those shapes onto the canvas</p>
<script src="/static/konva.min.js"></script>
<div id="container">Konva.Circle<br/><br/>var redCircle = new Konva.Circle({<br/>x: 20,<br/>y: 20,<br/>radius: 10,<br/>fill: 'red'<br/>});<br/><br/>(x, y) are the coordinates of the center of the circle. (Remember that for a Konva.Rect, they were the upper left corner.)</div>
<div></div>
<div>Konva.Ellipse<br/><br/>var greenEllipse = new Konva.Ellipse({<br/>x: 20,<br/>y: 20,<br/>radius: {x: 10, y: 5},<br/>fill: 'green'<br/>});<br/><br/>Notice that the radius property of an ellipse is an object with keys x and y so you can make the horizontal and vertical sizes different.<br/>(x, y) is still the center.</div>
<div>
<div class="shape" title="">
<h4>What if I don't want the inside filled in?</h4>
</div>
<div class="shape" title="">
<p>var greenEllipse = new Konva.Ellipse({<br/>x: 20,<br/>y: 20,<br/>radius: {x: 10, y: 5},<br/>stroke: 'green'<br/>});</p>
<p>This will create an ellipse outlined in green, but with the inside empty since there is no fill.</p>
<p>You can use both a stroke and a fill in the same shape if you want. This lets you make a green outline filled with red, for example.</p>
<h4>Productivity Tip: Add several shapes to the layer at once</h4>
<p>var redRect = new Konva.Rect({ blah, blah, blah });<br/>var blueRect = new Konva.Rect({ blah, blah, blah });<br/>var redCircle = new Konva.Rect({ blah, blah, blah });<br/>var blueCircle = new Konva.Rect({ blah, blah, blah });</p>
<p>layer.add(redRect, blueRect, redCircle, blueCircle);</p>
<p>The order matters! Shapes you add to the layer later will cover up shapes added earlier if they overlap.</p>
<h4>Even more productivity: The clone method</h4>
<p>var leftCircle = new Konva.Circle({<br/>x: 20,<br/>y: 20,<br/>radius: 10,<br/>fill: '#ff0000'<br/>});</p>
<p>var rightCircle = leftCircle.clone({<br/>x: 60<br/>});</p>
<p>With the clone method, I only have to specify the properties that are different from the shape I'm copying.</p>
<p>Konva.Line</p>
<p>var blueV = new Konva.Line({<br/>points: [50, 50, 100, 100, 150, 50],<br/>stroke: 'blue',<br/>strokeWidth: 4 <br/>});</p>
<p>This creates a line starting at the ordered pair (50, 50), then to (100, 100), and then to (150, 50).</p>
<p>Making a Polygon</p>
<p>var blueV = new Konva.Line({<br/>points: [50, 50, 100, 100, 150, 50],<br/>stroke: 'blue',<br/>strokeWidth: 4,<br/>closed: true <br/>});</p>
<p>If you set the closed property to true, Konva automatically adds a segment from the last point back to the first point. This also allows you to add a fill if you wish.</p>
<h4>Productivity Tip: Use x and y with Konva.Line</h4>
<p>var blueV = new Konva.Line({<br/>points: [50, 50, 100, 100, 150, 50],<br/>stroke: 'blue',<br/>});</p>
<p>var theSame = new Konva.Line({<br/>x: 50,<br/>y: 50,<br/>points: [0, 0, 50, 50, 100, 0], <br/>stroke: 'blue',<br/>});</p>
<p>These two shapes are exactly the same. The second one moves the point (0,0) of the line to (50,50) of the canvas, and calculates everything else accordingly. You can use x and y to avoid recalculating every ordered pair if you decide you want everything 10 pixels to the right, for example.</p>
</div>
</div>
<script>// <![CDATA[
// first we need to create a stage
var stage = new Konva.Stage({
  container: 'container',   // id of container <div>
  width: 500,
  height: 500
});

// then create layer
var layer = new Konva.Layer();

// create our shape
var circle = new Konva.Circle({
  x: stage.getWidth() / 2,
  y: stage.getHeight() / 2,
  radius: 70,
  fill: 'red',
  stroke: 'black',
  strokeWidth: 4,
  draggable: true
});

// add the shape to the layer
layer.add(circle);

// add the layer to the stage
stage.add(layer);

// draw the image
layer.draw();
// ]]></script>
<h2>X3d</h2>
<p>利用 X3d 或 three.js 檢視 3D 零組件?</p>
<p><a href="https://doc.x3dom.org/tutorials/basics/htmlCSS/index.html">https://doc.x3dom.org/tutorials/basics/htmlCSS/index.html</a> </p>
<p><a href="https://codefluegel.com/en/3d-im-browser/">https://codefluegel.com/en/3d-im-browser/</a> </p>
<p><a href="http://3dspace.com/2016/02/x3dom-vs-three-js/">http://3dspace.com/2016/02/x3dom-vs-three-js/</a> </p>
<p><a href="http://doc.instantreality.org/tutorial/direct-scene-manipulations-with-javascript/">http://doc.instantreality.org/tutorial/direct-scene-manipulations-with-javascript/</a> </p>
<p><a href="https://www.elphel.com/blog/2015/12/x3d-assemblies-from-any-cad/">https://www.elphel.com/blog/2015/12/x3d-assemblies-from-any-cad/</a> </p>
<script src="https://www.x3dom.org/download/x3dom.js"></script>
<script>// <![CDATA[
function changeColor()
        {
            if(document.getElementById("color").getAttribute('diffuseColor')=="1 0 0")
                document.getElementById("color").setAttribute('diffuseColor', '0 0 1');
            else
                document.getElementById("color").setAttribute('diffuseColor', '1 0 0');
        }
>
// ]]></script>
<p>This is my first html page with some 3d objects. <x3d height="400px" width="500px"> <scene> <shape onclick="changeColor();"> <appearance> <material diffusecolor="1 0 0" id="color"> </material> </appearance> <box></box> </shape> <transform translation="-3 0 0"> <shape> <appearance> <material diffusecolor="0 1 0"></material> </appearance> <cone></cone> </shape> </transform> <transform translation="3 0 0"> <shape> <appearance> <material diffusecolor="0 0 1"></material> </appearance> <sphere></sphere> </shape> </transform> </scene> </x3d></p>
<h2>Wagtail</h2>
<p>要參與 Wagtail 內容管理系統程式開發嗎?</p>
<p><a href="https://github.com/wagtail/wagtail">https://github.com/wagtail/wagtail</a> </p>
<p><a href="https://github.com/wagtail/bakerydemo">https://github.com/wagtail/bakerydemo</a> </p>
<p><a href="https://github.com/mhnbcu/wagtailbakery">https://github.com/mhnbcu/wagtailbakery</a> </p>
<h2>Fossil SCM</h2>
<p>除了 Git, 您還需要了解如何使用 Fossil SCM, Why?</p>
<p><a href="https://www.fossil-scm.org">https://www.fossil-scm.org</a> </p>
<p><a href="/downloads/fossilbook.pdf">fossilbook.pdf</a></p>
<p>Fossil SCM 簡介: <a href="http://mde.tw/2017springcd/blog/intro-fossil-scm.html">http://mde.tw/2017springcd/blog/intro-fossil-scm.html</a> </p>
<p>編譯 Fossil SCM: <a href="http://lab.kmol.info/blog/msys2_compile_fossil_scm.html">http://lab.kmol.info/blog/msys2_compile_fossil_scm.html</a> </p>
<p><a href="http://mde.tw/2017springwcm/blog/2017spring-ubuntu-stunnel-fossil.html">http://mde.tw/2017springwcm/blog/2017spring-ubuntu-stunnel-fossil.html</a></p>
<p><a href="http://mde.tw/2017springwcm/blog/2017spring-stunnel-fossil.html">http://mde.tw/2017springwcm/blog/2017spring-stunnel-fossil.html</a> </p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/JA75HIMhIgk" width="560"></iframe></p>
<p>以下為建立各學員倉儲的程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
import string
import random
# 使用 Gmail 寄信
import smtplib
import re
from email.mime.text import MIMEText  
from email.header import Header

def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    '''
    source: https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits-in-python
    '''
    return ''.join(random.choice(chars) for _ in range(size))

# 讀取學員名單, 逐一取得學員學號, 學員名單, , 檢查點 1/7
student_data = open("2017fall_list/1b.txt").read()
student_list = student_data.splitlines()

# 利用 gmail smtp 功能寄信
server = smtplib.SMTP('smtp.gmail.com:587')
server.ehlo()
server.starttls()
# 以下必須準備好對應郵件帳號與密碼的外部檔案, 所提供的寄信帳號, 是否可以寄信, 檢查點 2/7
'''
寄信之前必須到 https://www.google.com/settings/security/lesssecureapps 修改權限, 改為較低安全權限
否則無法使用程式寄信!
'''
# 從外部檔案讀取要用來寄信的 gmail 帳號與密碼
# mail.txt 格式為: 電子郵箱,對應密碼, 以逗點隔開, 檢查點 3/7
email_data = open("z:/2017fall/mail.txt").read()
email, email_password= email_data.split(",")
print(email, email_password)
# 是否登入所提供寄信的電子郵箱, 4/7
server.login(email, email_password)
# 不同課程名稱, 與對應主機名稱, 必須配合修改 5/7
course_title = "計算機程式"
fossil_server = "cpb.kmol.info"

for student_num in student_list:
    username = student_num
    repository = username + '.fossil'
    # 利用所提供的字串, 以亂數組成六個字元的密碼
    password = id_generator(6, "23456789abcdef")
    print(student_num, ", " , password)

    # 執行 dos command 指令, 建立倉儲
    os.system("fossil init -A " +username + " " + repository)
    print("已經建立倉儲 " + repository)

    # 執行 dos command 指令, 修改使用者密碼
    os.system("fossil user password " + username + " " + password + " -R " + repository)
    print("已經修改密碼")
    
    # 利用 Gmail 寄信, 告知各學員倉儲連結與帳號密碼
    # 每一位學員收到的 output 都從這裡 reset
    output = ""
    # 若學號欄為空, 則不寄信
    if student_num != "":
        # output 為寄給每一位學員的資料表格
        mail_content = student_num+' 您好: &lt;br /&gt;&lt;br /&gt; 您在 '+course_title+' 課程中的區域網路倉儲: &lt;a href="https://'+fossil_server+'/'+student_num+'"&gt;https://'+fossil_server+'/'+student_num+'&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;'
        mail_content += '管理帳號為:'+ student_num + '&lt;br /&gt; 管理密碼為: '+ password+'&lt;br /&gt;&lt;br /&gt;'
        print(student_num)
        print(mail_content)
        # 至此 mail_content 已經確定
        # 在測試與實際寄送資料, 也必須配合修改, 檢查點  6/7
        receiver_email = student_num + "@gm.nfu.edu.tw"
        # 測試用
        #receiver_email = student_num+"@mde.tw"
        # 列出收信人 email 位址
        #print(receiver_email)
        #message= MIMEText(mail_content,'plain','UTF-8')
        # 以 html 格式寄信
        message= MIMEText(mail_content,'html','UTF-8')
        message['Subject'] = Header(course_title+" Fossil SCM 帳號通知", 'UTF-8') 
        # 可以先不寄信, 確定格式正確後再開啟, 是否實際寄出信件, 檢查點 7/7
        server.sendmail("gmail_address", receiver_email, message.as_string())
server.quit()</pre>
<p>至於產生上述多學員連結的程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">student_data = open("2017fall_list/1b.txt").read()
student_list = student_data.splitlines()

for student_num in student_list:
    print("  *  [https://cpb.kmol.info/"+student_num+"|"+student_num+"]")</pre>
<p>已知問題: server cache 在網路連線過程經常丟失, 編輯內容時要先以 ctrl + c 暫存內容後再送出.</p>
<h3>文件檔案管理</h3>
<h4>文件檔案為何需要管理?</h4>
<p>這裡所指的文件檔案, 特指適合直接讓使用者閱讀的文字檔案, 而非二位元內容檔案.</p>
<p>這些文字檔案包含使用手冊、流程說明文件或電腦程式原始碼, 當使用者在建立這些使用手冊、流程說明文件或程式原始碼的過程, 將會產生不同的版本.</p>
<p>當多名使用者在同一時間或不同時間, 以協同流程編輯建立這些文件檔案時, 若沒有完善管理, 將無法辨識那些內容是在那一時間由那一位作者所建立或修改.</p>
<p>此外, 單人或多人若僅在各自的固定電腦或移動式筆電中進行文件改版編輯, 一旦這些保全措施較不完善的裝置, 因毀損或丟失後, 這些資料將較難復原.</p>
<p>因此, 設法讓文件檔案的改版流程不致於混亂, 且不容易丟失, 設法運用近端與雲端電腦的特性, 進行文件版次管理, 成為必要手段.</p>
<p>2005 年推出的 Git 與 2006 年推出的 Fossil SCM 即是為了解決上述文件檔案管理議題, 而產生的 SCM (Software Configuration Management) 套件.</p>
<p> 以下將介紹 Fossil SCM的使用.</p>
<p>使用 Fossil SCM 的第一步, 就是根據所使用的電腦操作系統, 下載單一檔案工具:</p>
<p><a href="https://www.fossil-scm.org/fossil/uv/download.html">https://www.fossil-scm.org/fossil/uv/download.html</a></p>
<p>Fossil SCM 在 Windows 10 環境中, 就只是一個 6MB 的 fossil.exe 檔案.</p>
<p>假如您目前的可攜系統中, 在命令列中執行 fossil 時, 電腦回應:</p>
<p>'fossil' is not recognized as an internal or external command,<br/>operable program or batch file.</p>
<p>表示 y:\ 目錄下尚無 fossil.exe, 只要從上述的 download 頁面下載 Windows 版本壓縮檔案, 解開 fossil.exe 放入 y:\ 即可, 利用 fossil version 命令, 確認電腦回應:</p>
<p>This is fossil version 2.8 [f8d7f76bfd] 2019-02-20 15:01:32 UTC</p>
<p>接下來就可以利用這個不到 6 MB 的可執行檔案, 測試各種 Fossil SCM 所提供的功能.</p>
<p>由於我們希望在 Windows 10 的環境中利用 Virtualbox 中的 Ubuntu 18.04-2 建立遠端 Fossil SCM 伺服器系統, 與近端的 fossil.exe 結合運用, 因此使用者下載近端的 fossil.exe 之後, 必須設法取得容量大約 10 GB 的 u1804.vdi 檔案, 以便能夠在同一台 Windows 10 中練習之後的 Fossil SCM 指令. <span style="background-color: #ffffff; color: #ffffff;"><a href="https://drive.google.com/file/d/1yjWQ5e6AGaio2ZvclONKEwIfSMtY2gSz/view?usp=sharing" style="background-color: #ffffff; color: #ffffff;">.</a></span></p>
<p>此外, 假如希望自行編譯 Windows 10 64 位元下的 fossil.exe, 可以從 <a href="https://www.fossil-scm.org/xfer/uv/download.html">https://www.fossil-scm.org/xfer/uv/download.html</a> 下載最新版本的原始碼, 根據 <a href="http://lab.kmol.info/blog/msys2_compile_fossil_scm.html">http://lab.kmol.info/blog/msys2_compile_fossil_scm.html</a> 中的說明, 製作 fossil.exe.</p><h2>自動控制</h2>
<p><a href="/downloads/MAGNETIC LEVITATION SYSTEM IN CONTROL ENGINEERING EDUCATION.pdf">MAGNETIC LEVITATION SYSTEM IN CONTROL ENGINEERING EDUCATION.pdf</a></p>
<p><a href="/downloads/MODELLING_AND_SIMULATION_OF_A_MAGNETIC_LEVITATION_.pdf">MODELLING_AND_SIMULATION_OF_A_MAGNETIC_LEVITATION_.pdf</a></p>
<p><a href="/downloads/magnetic levitation system simulation.pdf">magnetic levitation system simulation.pdf</a></p>
<p><a href="http://brm.io/matter-js/">http://brm.io/matter-js/</a> </p>
<p><a href="https://github.com/liabru/matter-js">https://github.com/liabru/matter-js</a></p>
<h4>The Quadratic Formula</h4>
<p>\[x = {-b \pm \sqrt{b^2-4ac} \over 2a}.\]</p>
<h4>Cauchy's Integral Formula</h4>
<p>\[f(a) = \frac{1}{2\pi i} \oint\frac{f(z)}{z-a}dz\]</p>
<h4>Double angle formula for Cosines</h4>
<p>\[ \cos(θ+φ)=\cos(θ)\cos(φ)−\sin(θ)\sin(φ) \]</p>
<h4>Gauss' Divergence Theorem</h4>
<p>\[ \int_D ({\nabla\cdot} F)dV=\int_{\partial D} F\cdot ndS \]</p>
<h5>Curl of a Vector Field</h5>
<p>\[ \vec{\nabla} \times \vec{F} = \left( \frac{\partial F_z}{\partial y} - \frac{\partial F_y}{\partial z} \right) \mathbf{i} + \left( \frac{\partial F_x}{\partial z} - \frac{\partial F_z}{\partial x} \right) \mathbf{j} + \left( \frac{\partial F_y}{\partial x} - \frac{\partial F_x}{\partial y} \right) \mathbf{k} \]</p>
<h4>Standard Deviation</h4>
<p>\[\sigma = \sqrt{ \frac{1}{N} \sum_{i=1}^N (x_i -\mu)^2} \]</p>
<h4>Definition of Christoffel Symbols</h4>
<p>\[(\nabla_X Y)^k = X^i (\nabla_i Y)^k = X^i \left( \frac{\partial Y^k}{\partial x^i} + \Gamma_{im}^k Y^m \right)\]</p><h2>機構模擬</h2>
<p><a href="/downloads/MeKin2D-Suite for Planar Mechanism Kinematics.pdf">MeKin2D-Suite for Planar Mechanism Kinematics.pdf</a></p>
<p><a href="/downloads/KINEMATIC ANALYSIS OF PLANAR AND SPATIAL MECHANISMS USING MATPACK.pdf">KINEMATIC ANALYSIS OF PLANAR AND SPATIAL MECHANISMS USING MATPACK.pdf</a></p>
<p><a href="/downloads/Design Platform for Planar Mechanisms based on a Qualitative Kinematics.pdf">Design Platform for Planar Mechanisms based on a Qualitative Kinematics.pdf</a></p>
<p><a href="/downloads/The Design and Simulation of Mechanisms.pdf">The Design and Simulation of Mechanisms.pdf</a></p>
<p><a href="/downloads/Simulation and Analysis of Mechanisms.pdf">Simulation and Analysis of Mechanisms.pdf</a></p>
<p><a href="/downloads/Automated design of planar mechanisms.pdf">Automated design of planar mechanisms.pdf</a></p>
<p><a href="/downloads/Machine Dynamics in Mechatronic Systems.pdf">Machine Dynamics in Mechatronic Systems.pdf</a></p>
<p><a href="/downloads/2016_Dynamics and Control - lessons learned from optical disc drives v1.2 - HANDOUT.pdf">2016_Dynamics and Control - lessons learned from optical disc drives v1.2 - HANDOUT.pdf</a></p>
<p><a href="/downloads/The kinematic analysis of the third class mechanism.pdf">The kinematic analysis of the third class mechanism.pdf</a></p>
<p><a href="/downloads/MULTIBODY KINEMATICS AND DYNAMICS.pdf">MULTIBODY KINEMATICS AND DYNAMICS.pdf</a></p>
<p><a href="/downloads/Machines and Mechanisms.pdf">Machines and Mechanisms.pdf</a></p>
<p><a href="/downloads/A Matlab Program for Analysis of Kinematics.pdf">A Matlab Program for Analysis of Kinematics.pdf</a></p>
<p><a href="/downloads/2D Planar Mechanism.pdf">2D Planar Mechanism.pdf</a></p>
<p><a href="/downloads/Mechanism Kinematics and Dynamics Final Project.pdf">Mechanism Kinematics and Dynamics Final Project.pdf</a></p>
<p><a href="https://www.mbdyn.org/">https://www.mbdyn.org/</a></p>
<p><a href="/downloads/kinematic and dynamic analysis of mechanisms-a finite element approach.pdf">kinematic and dynamic analysis of mechanisms-a finite element approach.pdf</a></p>
<p><a href="/downloads/Rigid-Body Motion of Planar Mechanisms by Finite Element Method With Comparison to the Multibody Approach.pdf">Rigid-Body Motion of Planar Mechanisms by Finite Element Method With Comparison to the Multibody Approach.pdf</a></p><h1>參考資料</h1>
<h4>常用連結:</h4>
<p>雲端點名: <a href="https://rollcall.nfu.edu.tw/">https://rollcall.nfu.edu.tw/</a> </p>
<p>2019wcm 網誌: <a href="https://2019wcm.blogspot.com/">https://2019wcm.blogspot.com/</a> </p>
<hr/>
<p><a href="/downloads/2013_PhD_Development of CMS-based Web Applications with a Multi-Language Model-Driven Approach.pdf">Development of CMS-based Web Applications with a Multi-Language Model-Driven Approach.pdf</a> (2013 Ph.D. Dissertation)</p>
<h4>Building a Web Content Management System (2012 M.S. thesis)</h4>
<p><a href="https://sdsu-dspace.calstate.edu/bitstream/handle/10211.10/3228/Shah_Rima.pdf">https://sdsu-dspace.calstate.edu/bitstream/handle/10211.10/3228/Shah_Rima.pdf</a> (local download)</p>
<p><a href="/downloads/2018_UNIVERSITY_OF_HELSINKI_web_content_management_software_thesis.pdf">Web Content Management Software Usability and Performance.pdf</a> (2018 M.S. Thesis)</p>
<h4>Harvard University online course</h4>
<p><a href="https://online-learning.harvard.edu/course/introduction-web-content-management-systems-site-development-0">https://online-learning.harvard.edu/course/introduction-web-content-management-systems-site-development-0</a> </p>
<p><img alt="" class="with_border" height="367" src="/images/harvard_cms_course.png" width="800"/></p>
<h4>上述課程說明:</h4>
<p>In a rapidly changing world, the need for online publishers to <span style="background-color: #ffff00;">keep up with</span> the needs and expectations of their site visitors is paramount. <br/> <br/>Today, many web publishers use <span style="background-color: #ffff00;">content management systems</span> (CMS) to allow them to <span style="background-color: #ffff00;">instantly</span> and dynamically update web pages and properties as new content becomes available so that every visit to a site is engaging, informative, and meaningful.</p>
<p>This course explores the use of the three most popular <span style="background-color: #ffff00;">open source web-based content management systems</span>—Wordpress, Joomla, and Drupal—to create dynamic and flexible websites and landing pages.</p>
<p>Participants explore the fundamentals of <span style="background-color: #ffff00;">planning</span> dynamic websites, CMS <span style="background-color: #ffff00;">database</span> management, developing <span style="background-color: #ffff00;">CSS</span>-controlled site templates, and creating database-driven websites through the planning and creation of their own <span style="background-color: #ffff00;">topic-based</span> sites.</p>
<h4><a href="https://www.oranjeexpress.com/2015/04/29/%E8%8D%B7%E8%98%AD%E7%83%8F%E7%89%B9%E5%8B%92%E6%94%AF%E5%A4%A7%E5%AD%B8/">荷事生非</a></h4>
<h4>虎擔妙算</h4>